
InitialRS232.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fe  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000152  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000048  00000000  00000000  00000182  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000027d  00000000  00000000  000001ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000001e6  00000000  00000000  00000447  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000229  00000000  00000000  0000062d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000058  00000000  00000000  00000858  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001b5  00000000  00000000  000008b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000003e  00000000  00000000  00000a65  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000aa3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   8:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  10:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  14:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  18:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  1c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  20:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  24:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  28:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  2c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  30:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  34:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  38:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  3c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  40:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  44:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  48:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  4c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  50:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  54:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  58:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  5c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  60:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  64:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  68:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  6c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61
  7c:	0e 94 44 00 	call	0x88	; 0x88 <main>
  80:	0c 94 7d 00 	jmp	0xfa	; 0xfa <_exit>

00000084 <__bad_interrupt>:
  84:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000088 <main>:
#define toggle_bit(reg, bit) (reg ^= (1 << bit))
#define test_bit( reg, bit ) (reg & (1 << bit))

int main(void)
{
	UART0_init(F_CPU, UART0_BAUDRATE);
  88:	60 e0       	ldi	r22, 0x00	; 0
  8a:	7b e4       	ldi	r23, 0x4B	; 75
  8c:	80 e8       	ldi	r24, 0x80	; 128
  8e:	93 ef       	ldi	r25, 0xF3	; 243
  90:	0e 94 71 00 	call	0xe2	; 0xe2 <UART0_init>
	set_bit(DDRA,0);
  94:	d0 9a       	sbi	0x1a, 0	; 26
	set_bit(DDRA,1);
  96:	d1 9a       	sbi	0x1a, 1	; 26
	set_bit(PORTA,0);
  98:	d8 9a       	sbi	0x1b, 0	; 27
	clear_bit(PORTA,1);	
  9a:	d9 98       	cbi	0x1b, 1	; 27
	unsigned char msg[] = "heisann";
    while(1)
    {
		for( int i = 0; i < 6 ; i++) {
  9c:	c0 e0       	ldi	r28, 0x00	; 0
  9e:	d0 e0       	ldi	r29, 0x00	; 0
			UART0_transmit(0b11111100);
		}
		_delay_ms(1000);
		toggle_bit(PORTA,0);
  a0:	ee 24       	eor	r14, r14
  a2:	e3 94       	inc	r14
		toggle_bit(PORTA,1);
  a4:	68 94       	set
  a6:	ff 24       	eor	r15, r15
  a8:	f1 f8       	bld	r15, 1
	set_bit(PORTA,0);
	clear_bit(PORTA,1);	
	unsigned char msg[] = "heisann";
    while(1)
    {
		for( int i = 0; i < 6 ; i++) {
  aa:	00 e0       	ldi	r16, 0x00	; 0
  ac:	10 e0       	ldi	r17, 0x00	; 0
  ae:	04 c0       	rjmp	.+8      	; 0xb8 <main+0x30>
			UART0_transmit(0b11111100);
  b0:	8c ef       	ldi	r24, 0xFC	; 252
  b2:	0e 94 79 00 	call	0xf2	; 0xf2 <UART0_transmit>
	set_bit(PORTA,0);
	clear_bit(PORTA,1);	
	unsigned char msg[] = "heisann";
    while(1)
    {
		for( int i = 0; i < 6 ; i++) {
  b6:	21 96       	adiw	r28, 0x01	; 1
  b8:	c6 30       	cpi	r28, 0x06	; 6
  ba:	d1 05       	cpc	r29, r1
  bc:	cc f3       	brlt	.-14     	; 0xb0 <main+0x28>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	2f e7       	ldi	r18, 0x7F	; 127
  c0:	8d ef       	ldi	r24, 0xFD	; 253
  c2:	9e e0       	ldi	r25, 0x0E	; 14
  c4:	21 50       	subi	r18, 0x01	; 1
  c6:	80 40       	sbci	r24, 0x00	; 0
  c8:	90 40       	sbci	r25, 0x00	; 0
  ca:	e1 f7       	brne	.-8      	; 0xc4 <main+0x3c>
  cc:	00 c0       	rjmp	.+0      	; 0xce <main+0x46>
  ce:	00 00       	nop
			UART0_transmit(0b11111100);
		}
		_delay_ms(1000);
		toggle_bit(PORTA,0);
  d0:	8b b3       	in	r24, 0x1b	; 27
  d2:	8e 25       	eor	r24, r14
  d4:	8b bb       	out	0x1b, r24	; 27
		toggle_bit(PORTA,1);
  d6:	8b b3       	in	r24, 0x1b	; 27
  d8:	8f 25       	eor	r24, r15
  da:	8b bb       	out	0x1b, r24	; 27
	set_bit(PORTA,0);
	clear_bit(PORTA,1);	
	unsigned char msg[] = "heisann";
    while(1)
    {
		for( int i = 0; i < 6 ; i++) {
  dc:	c0 2f       	mov	r28, r16
  de:	d1 2f       	mov	r29, r17
			UART0_transmit(0b11111100);
		}
		_delay_ms(1000);
		toggle_bit(PORTA,0);
		toggle_bit(PORTA,1);
    }
  e0:	eb cf       	rjmp	.-42     	; 0xb8 <main+0x30>

000000e2 <UART0_init>:
#include "UART_driver.h"

void UART0_init(unsigned int clock, int baud){
	int ubrr = (clock /(16 * baud)) - 1;
	ubrr= 15;
	UBRR0H = (unsigned char) (ubrr >> 8);
  e2:	10 bc       	out	0x20, r1	; 32
	UBRR0L = (unsigned char) (ubrr);
  e4:	8f e0       	ldi	r24, 0x0F	; 15
  e6:	89 b9       	out	0x09, r24	; 9
	UCSR0B = (1 << RXEN0) | (1 << TXEN0); // Set RX-enable and TX-enable bits
  e8:	88 e1       	ldi	r24, 0x18	; 24
  ea:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = (0b11 << UCSZ00) | (0b00 << UPM00) | (1 << USBS0); // ( character size ) | ( parity ) | ( stop bits )
  ec:	8e e0       	ldi	r24, 0x0E	; 14
  ee:	80 bd       	out	0x20, r24	; 32
  f0:	08 95       	ret

000000f2 <UART0_transmit>:
}

void UART0_transmit(unsigned char c) {
	while (  UCSR0B & (1 << UDRE0)) {
  f2:	55 99       	sbic	0x0a, 5	; 10
  f4:	fe cf       	rjmp	.-4      	; 0xf2 <UART0_transmit>
	}
	UDR0 = c;
  f6:	8c b9       	out	0x0c, r24	; 12
  f8:	08 95       	ret

000000fa <_exit>:
  fa:	f8 94       	cli

000000fc <__stop_program>:
  fc:	ff cf       	rjmp	.-2      	; 0xfc <__stop_program>
