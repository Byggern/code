
Byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000384  00800100  00001540  000015d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001540  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800484  00800484  00001958  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001958  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000168  00000000  00000000  000019b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001a28  00000000  00000000  00001b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b5d  00000000  00000000  00003544  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a8a  00000000  00000000  000040a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000398  00000000  00000000  00004b2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000070f  00000000  00000000  00004ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000010de  00000000  00000000  000055d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000178  00000000  00000000  000066b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
       8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
       c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	14 e0       	ldi	r17, 0x04	; 4
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	e0 e4       	ldi	r30, 0x40	; 64
      84:	f5 e1       	ldi	r31, 0x15	; 21
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	a4 38       	cpi	r26, 0x84	; 132
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	24 e0       	ldi	r18, 0x04	; 4
      94:	a4 e8       	ldi	r26, 0x84	; 132
      96:	b4 e0       	ldi	r27, 0x04	; 4
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	a8 39       	cpi	r26, 0x98	; 152
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 57 00 	call	0xae	; 0xae <main>
      a6:	0c 94 9e 0a 	jmp	0x153c	; 0x153c <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <main>:
#include "drivers/OLED_driver.h"
#define UART0_BAUDRATE 9600
/* default output is to COM1. */

int main(void)
{
      ae:	cf 93       	push	r28
      b0:	df 93       	push	r29
      b2:	cd b7       	in	r28, 0x3d	; 61
      b4:	de b7       	in	r29, 0x3e	; 62
      b6:	2a 97       	sbiw	r28, 0x0a	; 10
      b8:	0f b6       	in	r0, 0x3f	; 63
      ba:	f8 94       	cli
      bc:	de bf       	out	0x3e, r29	; 62
      be:	0f be       	out	0x3f, r0	; 63
      c0:	cd bf       	out	0x3d, r28	; 61
	/* System inits */
	UART0_init(F_CPU, UART0_BAUDRATE);
      c2:	20 e8       	ldi	r18, 0x80	; 128
      c4:	35 e2       	ldi	r19, 0x25	; 37
      c6:	40 e0       	ldi	r20, 0x00	; 0
      c8:	50 e0       	ldi	r21, 0x00	; 0
      ca:	60 e8       	ldi	r22, 0x80	; 128
      cc:	73 ef       	ldi	r23, 0xF3	; 243
      ce:	8a e4       	ldi	r24, 0x4A	; 74
      d0:	90 e0       	ldi	r25, 0x00	; 0
      d2:	0e 94 3b 04 	call	0x876	; 0x876 <UART0_init>
	printf("\n\n");
      d6:	81 e0       	ldi	r24, 0x01	; 1
      d8:	94 e0       	ldi	r25, 0x04	; 4
      da:	0e 94 46 06 	call	0xc8c	; 0xc8c <puts>
	EXTMEM_init();
      de:	0e 94 63 03 	call	0x6c6	; 0x6c6 <EXTMEM_init>
	ADC_init();
      e2:	0e 94 84 01 	call	0x308	; 0x308 <ADC_init>
	HID_calibrate_joystick();
      e6:	0e 94 95 02 	call	0x52a	; 0x52a <HID_calibrate_joystick>
	OLED_init();
      ea:	0e 94 fe 03 	call	0x7fc	; 0x7fc <OLED_init>
	printf("\n");
      ee:	8a e0       	ldi	r24, 0x0A	; 10
      f0:	90 e0       	ldi	r25, 0x00	; 0
      f2:	0e 94 3f 06 	call	0xc7e	; 0xc7e <putchar>


	set_bit(DDRB,2);  // Output on heartbeat led pin
      f6:	ba 9a       	sbi	0x17, 2	; 23
	
	printf("X\tY\tLS\tRS\tLB\tRB\tDIR\tX\tY\n");
      f8:	80 e2       	ldi	r24, 0x20	; 32
      fa:	91 e0       	ldi	r25, 0x01	; 1
      fc:	0e 94 46 06 	call	0xc8c	; 0xc8c <puts>
	
	const char* dirNames[] = {"L","R","U","D","C"};
     100:	8a e0       	ldi	r24, 0x0A	; 10
     102:	e6 e1       	ldi	r30, 0x16	; 22
     104:	f1 e0       	ldi	r31, 0x01	; 1
     106:	de 01       	movw	r26, r28
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	01 90       	ld	r0, Z+
     10c:	0d 92       	st	X+, r0
     10e:	8a 95       	dec	r24
     110:	e1 f7       	brne	.-8      	; 0x10a <main+0x5c>
	
    while(1)
    {
		/* Print Joystick */
		/* Print Touch devices */
		printf("%3d\t%3d\t", HID_read_joystick_axis(X_AXIS), HID_read_joystick_axis(Y_AXIS));
     112:	08 e3       	ldi	r16, 0x38	; 56
     114:	11 e0       	ldi	r17, 0x01	; 1
		printf("%3d\t%3d\t", HID_read_slider(LEFT_SLIDER), HID_read_slider(RIGHT_SLIDER));
		printf("%1d\t%1d\t", HID_read_touch_button(LEFT_BUTTON), HID_read_touch_button(RIGHT_BUTTON));
     116:	0f 2e       	mov	r0, r31
     118:	f1 e4       	ldi	r31, 0x41	; 65
     11a:	4f 2e       	mov	r4, r31
     11c:	f1 e0       	ldi	r31, 0x01	; 1
     11e:	5f 2e       	mov	r5, r31
     120:	f0 2d       	mov	r31, r0
		printf("%s\t", dirNames[HID_read_joystick_direction()]);
     122:	0f 2e       	mov	r0, r31
     124:	fa e4       	ldi	r31, 0x4A	; 74
     126:	6f 2e       	mov	r6, r31
     128:	f1 e0       	ldi	r31, 0x01	; 1
     12a:	7f 2e       	mov	r7, r31
     12c:	f0 2d       	mov	r31, r0
		JOY_VALS joystickState = HID_read_joystick();
		printf("%4d\t%4d\r", joystickState.x_axis, joystickState.y_axis);
     12e:	0f 2e       	mov	r0, r31
     130:	fe e4       	ldi	r31, 0x4E	; 78
     132:	8f 2e       	mov	r8, r31
     134:	f1 e0       	ldi	r31, 0x01	; 1
     136:	9f 2e       	mov	r9, r31
     138:	f0 2d       	mov	r31, r0

		for( int i = 0; i < 128; i++){
     13a:	c1 2c       	mov	r12, r1
     13c:	b1 2c       	mov	r11, r1
			for ( int j = 0 ; j < 8 ; j++){
				if ( i+j> 40){
					OLED_vram[i+j*128] =255;
     13e:	ff 24       	eor	r15, r15
     140:	fa 94       	dec	r15
#include "drivers/OLED_driver.h"
#define UART0_BAUDRATE 9600
/* default output is to COM1. */

int main(void)
{
     142:	dc 2c       	mov	r13, r12
     144:	eb 2c       	mov	r14, r11
	
    while(1)
    {
		/* Print Joystick */
		/* Print Touch devices */
		printf("%3d\t%3d\t", HID_read_joystick_axis(X_AXIS), HID_read_joystick_axis(Y_AXIS));
     146:	81 e0       	ldi	r24, 0x01	; 1
     148:	0e 94 97 01 	call	0x32e	; 0x32e <HID_read_joystick_axis>
     14c:	a8 2e       	mov	r10, r24
     14e:	80 e0       	ldi	r24, 0x00	; 0
     150:	0e 94 97 01 	call	0x32e	; 0x32e <HID_read_joystick_axis>
     154:	1f 92       	push	r1
     156:	af 92       	push	r10
     158:	1f 92       	push	r1
     15a:	8f 93       	push	r24
     15c:	1f 93       	push	r17
     15e:	0f 93       	push	r16
     160:	0e 94 2b 06 	call	0xc56	; 0xc56 <printf>
		printf("%3d\t%3d\t", HID_read_slider(LEFT_SLIDER), HID_read_slider(RIGHT_SLIDER));
     164:	83 e0       	ldi	r24, 0x03	; 3
     166:	0e 94 32 03 	call	0x664	; 0x664 <HID_read_slider>
     16a:	a8 2e       	mov	r10, r24
     16c:	82 e0       	ldi	r24, 0x02	; 2
     16e:	0e 94 32 03 	call	0x664	; 0x664 <HID_read_slider>
     172:	1f 92       	push	r1
     174:	af 92       	push	r10
     176:	1f 92       	push	r1
     178:	8f 93       	push	r24
     17a:	1f 93       	push	r17
     17c:	0f 93       	push	r16
     17e:	0e 94 2b 06 	call	0xc56	; 0xc56 <printf>
		printf("%1d\t%1d\t", HID_read_touch_button(LEFT_BUTTON), HID_read_touch_button(RIGHT_BUTTON));
     182:	85 e0       	ldi	r24, 0x05	; 5
     184:	0e 94 43 03 	call	0x686	; 0x686 <HID_read_touch_button>
     188:	a8 2e       	mov	r10, r24
     18a:	84 e0       	ldi	r24, 0x04	; 4
     18c:	0e 94 43 03 	call	0x686	; 0x686 <HID_read_touch_button>
     190:	1f 92       	push	r1
     192:	af 92       	push	r10
     194:	1f 92       	push	r1
     196:	8f 93       	push	r24
     198:	5f 92       	push	r5
     19a:	4f 92       	push	r4
     19c:	0e 94 2b 06 	call	0xc56	; 0xc56 <printf>
		printf("%s\t", dirNames[HID_read_joystick_direction()]);
     1a0:	0e 94 fd 02 	call	0x5fa	; 0x5fa <HID_read_joystick_direction>
     1a4:	e8 2f       	mov	r30, r24
     1a6:	f0 e0       	ldi	r31, 0x00	; 0
     1a8:	ee 0f       	add	r30, r30
     1aa:	ff 1f       	adc	r31, r31
     1ac:	81 e0       	ldi	r24, 0x01	; 1
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	8c 0f       	add	r24, r28
     1b2:	9d 1f       	adc	r25, r29
     1b4:	e8 0f       	add	r30, r24
     1b6:	f9 1f       	adc	r31, r25
     1b8:	81 81       	ldd	r24, Z+1	; 0x01
     1ba:	8f 93       	push	r24
     1bc:	80 81       	ld	r24, Z
     1be:	8f 93       	push	r24
     1c0:	7f 92       	push	r7
     1c2:	6f 92       	push	r6
     1c4:	0e 94 2b 06 	call	0xc56	; 0xc56 <printf>
		JOY_VALS joystickState = HID_read_joystick();
     1c8:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <HID_read_joystick>
		printf("%4d\t%4d\r", joystickState.x_axis, joystickState.y_axis);
     1cc:	9f 93       	push	r25
     1ce:	8f 93       	push	r24
     1d0:	7f 93       	push	r23
     1d2:	6f 93       	push	r22
     1d4:	9f 92       	push	r9
     1d6:	8f 92       	push	r8
     1d8:	0e 94 2b 06 	call	0xc56	; 0xc56 <printf>
     1dc:	0f b6       	in	r0, 0x3f	; 63
     1de:	f8 94       	cli
     1e0:	de bf       	out	0x3e, r29	; 62
     1e2:	0f be       	out	0x3f, r0	; 63
     1e4:	cd bf       	out	0x3d, r28	; 61

		for( int i = 0; i < 128; i++){
     1e6:	ec 2d       	mov	r30, r12
     1e8:	fb 2d       	mov	r31, r11
     1ea:	1f c0       	rjmp	.+62     	; 0x22a <main+0x17c>
     1ec:	ac 01       	movw	r20, r24
     1ee:	46 0f       	add	r20, r22
     1f0:	57 1f       	adc	r21, r23
			for ( int j = 0 ; j < 8 ; j++){
				if ( i+j> 40){
     1f2:	49 32       	cpi	r20, 0x29	; 41
     1f4:	51 05       	cpc	r21, r1
     1f6:	44 f0       	brlt	.+16     	; 0x208 <main+0x15a>
					OLED_vram[i+j*128] =255;
     1f8:	a0 91 84 04 	lds	r26, 0x0484
     1fc:	b0 91 85 04 	lds	r27, 0x0485
     200:	a2 0f       	add	r26, r18
     202:	b3 1f       	adc	r27, r19
     204:	fc 92       	st	X, r15
     206:	07 c0       	rjmp	.+14     	; 0x216 <main+0x168>
				}else{
					OLED_vram[i+j*128] =0 ;
     208:	a0 91 84 04 	lds	r26, 0x0484
     20c:	b0 91 85 04 	lds	r27, 0x0485
     210:	a2 0f       	add	r26, r18
     212:	b3 1f       	adc	r27, r19
     214:	1c 92       	st	X, r1
		printf("%s\t", dirNames[HID_read_joystick_direction()]);
		JOY_VALS joystickState = HID_read_joystick();
		printf("%4d\t%4d\r", joystickState.x_axis, joystickState.y_axis);

		for( int i = 0; i < 128; i++){
			for ( int j = 0 ; j < 8 ; j++){
     216:	01 96       	adiw	r24, 0x01	; 1
     218:	20 58       	subi	r18, 0x80	; 128
     21a:	3f 4f       	sbci	r19, 0xFF	; 255
     21c:	88 30       	cpi	r24, 0x08	; 8
     21e:	91 05       	cpc	r25, r1
     220:	29 f7       	brne	.-54     	; 0x1ec <main+0x13e>
		printf("%1d\t%1d\t", HID_read_touch_button(LEFT_BUTTON), HID_read_touch_button(RIGHT_BUTTON));
		printf("%s\t", dirNames[HID_read_joystick_direction()]);
		JOY_VALS joystickState = HID_read_joystick();
		printf("%4d\t%4d\r", joystickState.x_axis, joystickState.y_axis);

		for( int i = 0; i < 128; i++){
     222:	31 96       	adiw	r30, 0x01	; 1
     224:	e0 38       	cpi	r30, 0x80	; 128
     226:	f1 05       	cpc	r31, r1
     228:	29 f0       	breq	.+10     	; 0x234 <main+0x186>
     22a:	bf 01       	movw	r22, r30
#include "drivers/OLED_driver.h"
#define UART0_BAUDRATE 9600
/* default output is to COM1. */

int main(void)
{
     22c:	9f 01       	movw	r18, r30
     22e:	8d 2d       	mov	r24, r13
     230:	9e 2d       	mov	r25, r14
     232:	dc cf       	rjmp	.-72     	; 0x1ec <main+0x13e>
				}else{
					OLED_vram[i+j*128] =0 ;
				}
			}
		}
		OLED_draw();
     234:	0e 94 0f 04 	call	0x81e	; 0x81e <OLED_draw>
		toggle_bit(PORTB,2);
     238:	98 b3       	in	r25, 0x18	; 24
     23a:	84 e0       	ldi	r24, 0x04	; 4
     23c:	89 27       	eor	r24, r25
     23e:	88 bb       	out	0x18, r24	; 24
    }
     240:	82 cf       	rjmp	.-252    	; 0x146 <main+0x98>

00000242 <ADC_start>:
	
	return ADC_read(channel);
}

void ADC_start(ADC_CHANNEL channel) {
	uint8_t mode_channel = (0b01 << 2) | channel; // ( Single ended mode ) | channel
     242:	84 60       	ori	r24, 0x04	; 4
	*adc_address = mode_channel; // Any value written to this address should activate ADC
     244:	e0 91 0a 01 	lds	r30, 0x010A
     248:	f0 91 0b 01 	lds	r31, 0x010B
     24c:	80 83       	st	Z, r24
     24e:	08 95       	ret

00000250 <ADC_read_blocking>:
		return 1;
	}
}

uint8_t ADC_read_blocking(ADC_CHANNEL channel) {
	ADC_start(channel);
     250:	0e 94 21 01 	call	0x242	; 0x242 <ADC_start>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     254:	81 e4       	ldi	r24, 0x41	; 65
     256:	8a 95       	dec	r24
     258:	f1 f7       	brne	.-4      	; 0x256 <ADC_read_blocking+0x6>
     25a:	00 c0       	rjmp	.+0      	; 0x25c <ADC_read_blocking+0xc>
	uint8_t mode_channel = (0b01 << 2) | channel; // ( Single ended mode ) | channel
	*adc_address = mode_channel; // Any value written to this address should activate ADC
}

uint8_t ADC_read(ADC_CHANNEL channel) {
	return *adc_address;
     25c:	e0 91 0a 01 	lds	r30, 0x010A
     260:	f0 91 0b 01 	lds	r31, 0x010B
     264:	80 81       	ld	r24, Z
	while(PIND & (1 << PIND5)) { // Wait for interrupt line from ADC
	}
	*/
	
	return ADC_read(channel);
}
     266:	08 95       	ret

00000268 <ADC_test>:
	} else {
		printf("[!] ADC initialization failed!\n");
	}
}

uint8_t ADC_test(void) {
     268:	ef 92       	push	r14
     26a:	ff 92       	push	r15
     26c:	0f 93       	push	r16
     26e:	1f 93       	push	r17
     270:	cf 93       	push	r28
     272:	df 93       	push	r29
	printf("Running ADC test...\n");
     274:	81 e6       	ldi	r24, 0x61	; 97
     276:	91 e0       	ldi	r25, 0x01	; 1
     278:	0e 94 46 06 	call	0xc8c	; 0xc8c <puts>
	int i;
	uint16_t ADC_test_sum = 0;
	uint8_t ADC_equal_last_sum = 0;
	uint8_t ADC_current_value = 0;
	uint8_t ADC_previous_value = ADC_read_blocking(CHANNEL_0);
     27c:	80 e0       	ldi	r24, 0x00	; 0
     27e:	0e 94 28 01 	call	0x250	; 0x250 <ADC_read_blocking>
     282:	f8 2e       	mov	r15, r24
     284:	c4 e6       	ldi	r28, 0x64	; 100
     286:	d0 e0       	ldi	r29, 0x00	; 0

uint8_t ADC_test(void) {
	printf("Running ADC test...\n");
	int i;
	uint16_t ADC_test_sum = 0;
	uint8_t ADC_equal_last_sum = 0;
     288:	e1 2c       	mov	r14, r1
}

uint8_t ADC_test(void) {
	printf("Running ADC test...\n");
	int i;
	uint16_t ADC_test_sum = 0;
     28a:	00 e0       	ldi	r16, 0x00	; 0
     28c:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t ADC_equal_last_sum = 0;
	uint8_t ADC_current_value = 0;
	uint8_t ADC_previous_value = ADC_read_blocking(CHANNEL_0);
	
	for (i = 0; i < 100; i++) {
		ADC_current_value = ADC_read_blocking(CHANNEL_0);
     28e:	80 e0       	ldi	r24, 0x00	; 0
     290:	0e 94 28 01 	call	0x250	; 0x250 <ADC_read_blocking>
		ADC_test_sum += ADC_current_value;
     294:	08 0f       	add	r16, r24
     296:	11 1d       	adc	r17, r1
		if (ADC_previous_value == ADC_current_value) {
     298:	f8 12       	cpse	r15, r24
     29a:	01 c0       	rjmp	.+2      	; 0x29e <ADC_test+0x36>
			ADC_equal_last_sum++;
     29c:	e3 94       	inc	r14
     29e:	21 97       	sbiw	r28, 0x01	; 1
	uint16_t ADC_test_sum = 0;
	uint8_t ADC_equal_last_sum = 0;
	uint8_t ADC_current_value = 0;
	uint8_t ADC_previous_value = ADC_read_blocking(CHANNEL_0);
	
	for (i = 0; i < 100; i++) {
     2a0:	20 97       	sbiw	r28, 0x00	; 0
     2a2:	11 f0       	breq	.+4      	; 0x2a8 <ADC_test+0x40>
		ADC_current_value = ADC_read_blocking(CHANNEL_0);
		ADC_test_sum += ADC_current_value;
		if (ADC_previous_value == ADC_current_value) {
			ADC_equal_last_sum++;
		}
		ADC_previous_value = ADC_current_value;
     2a4:	f8 2e       	mov	r15, r24
     2a6:	f3 cf       	rjmp	.-26     	; 0x28e <ADC_test+0x26>
	}
	
	printf("ADC running test sum: %d\n", ADC_test_sum);
     2a8:	1f 93       	push	r17
     2aa:	0f 93       	push	r16
     2ac:	85 e7       	ldi	r24, 0x75	; 117
     2ae:	91 e0       	ldi	r25, 0x01	; 1
     2b0:	9f 93       	push	r25
     2b2:	8f 93       	push	r24
     2b4:	0e 94 2b 06 	call	0xc56	; 0xc56 <printf>

	printf("Number of consequent equal values: %d\n", ADC_equal_last_sum);
     2b8:	1f 92       	push	r1
     2ba:	ef 92       	push	r14
     2bc:	8f e8       	ldi	r24, 0x8F	; 143
     2be:	91 e0       	ldi	r25, 0x01	; 1
     2c0:	9f 93       	push	r25
     2c2:	8f 93       	push	r24
     2c4:	0e 94 2b 06 	call	0xc56	; 0xc56 <printf>
	
	if (ADC_equal_last_sum > 95 || ADC_test_sum < 5) {
     2c8:	8d b7       	in	r24, 0x3d	; 61
     2ca:	9e b7       	in	r25, 0x3e	; 62
     2cc:	08 96       	adiw	r24, 0x08	; 8
     2ce:	0f b6       	in	r0, 0x3f	; 63
     2d0:	f8 94       	cli
     2d2:	9e bf       	out	0x3e, r25	; 62
     2d4:	0f be       	out	0x3f, r0	; 63
     2d6:	8d bf       	out	0x3d, r24	; 61
     2d8:	9f e5       	ldi	r25, 0x5F	; 95
     2da:	9e 15       	cp	r25, r14
     2dc:	18 f0       	brcs	.+6      	; 0x2e4 <ADC_test+0x7c>
     2de:	05 30       	cpi	r16, 0x05	; 5
     2e0:	11 05       	cpc	r17, r1
     2e2:	30 f4       	brcc	.+12     	; 0x2f0 <ADC_test+0x88>
		/* fail the test */
		printf("ADC test failed!\n");
     2e4:	86 eb       	ldi	r24, 0xB6	; 182
     2e6:	91 e0       	ldi	r25, 0x01	; 1
     2e8:	0e 94 46 06 	call	0xc8c	; 0xc8c <puts>
		return 0;
     2ec:	80 e0       	ldi	r24, 0x00	; 0
     2ee:	05 c0       	rjmp	.+10     	; 0x2fa <ADC_test+0x92>
		} else {
		/* pass the test */
		printf("ADC test passed.\n");
     2f0:	87 ec       	ldi	r24, 0xC7	; 199
     2f2:	91 e0       	ldi	r25, 0x01	; 1
     2f4:	0e 94 46 06 	call	0xc8c	; 0xc8c <puts>
		return 1;
     2f8:	81 e0       	ldi	r24, 0x01	; 1
	}
}
     2fa:	df 91       	pop	r29
     2fc:	cf 91       	pop	r28
     2fe:	1f 91       	pop	r17
     300:	0f 91       	pop	r16
     302:	ff 90       	pop	r15
     304:	ef 90       	pop	r14
     306:	08 95       	ret

00000308 <ADC_init>:

// const uint8_t adc_conv_time = 60; TODO: remove if not used
volatile uint8_t * adc_address = 0x1400;

void ADC_init(void){
	printf("Initializing ADC...\n");
     308:	88 ed       	ldi	r24, 0xD8	; 216
     30a:	91 e0       	ldi	r25, 0x01	; 1
     30c:	0e 94 46 06 	call	0xc8c	; 0xc8c <puts>
	clear_bit(DDRD,PD5); // Setup a pin to read interrupt line from ADC
     310:	8d 98       	cbi	0x11, 5	; 17
	if (ADC_test() == 1) {
     312:	0e 94 34 01 	call	0x268	; 0x268 <ADC_test>
     316:	81 30       	cpi	r24, 0x01	; 1
     318:	29 f4       	brne	.+10     	; 0x324 <ADC_init+0x1c>
		printf("ADC initialized.\n");
     31a:	8c ee       	ldi	r24, 0xEC	; 236
     31c:	91 e0       	ldi	r25, 0x01	; 1
     31e:	0e 94 46 06 	call	0xc8c	; 0xc8c <puts>
     322:	08 95       	ret
	} else {
		printf("[!] ADC initialization failed!\n");
     324:	8d ef       	ldi	r24, 0xFD	; 253
     326:	91 e0       	ldi	r25, 0x01	; 1
     328:	0e 94 46 06 	call	0xc8c	; 0xc8c <puts>
     32c:	08 95       	ret

0000032e <HID_read_joystick_axis>:
int16_t mapToRange(int16_t input, int16_t input_min, int16_t input_max, int16_t output_min, int16_t output_max) {
	return (input - input_min)*(output_max - output_min)/(input_max - input_min) + output_min;
}

/* Joystick and Button Functions */
uint8_t HID_read_joystick_axis(JOY_AXIS axis) {
     32e:	cf 93       	push	r28
     330:	c8 2f       	mov	r28, r24
	uint8_t adc_val = ADC_read_blocking(axis);
     332:	0e 94 28 01 	call	0x250	; 0x250 <ADC_read_blocking>
	uint8_t current_joy_val;
	if(axis == X_AXIS) {
     336:	c1 11       	cpse	r28, r1
     338:	23 c0       	rjmp	.+70     	; 0x380 <HID_read_joystick_axis+0x52>
#include "ADC_driver.h"

JOY_CALIBRATE joystick_calibration_values;

int16_t mapToRange(int16_t input, int16_t input_min, int16_t input_max, int16_t output_min, int16_t output_max) {
	return (input - input_min)*(output_max - output_min)/(input_max - input_min) + output_min;
     33a:	2f ef       	ldi	r18, 0xFF	; 255
     33c:	82 9f       	mul	r24, r18
     33e:	c0 01       	movw	r24, r0
     340:	11 24       	eor	r1, r1
     342:	6f ef       	ldi	r22, 0xFF	; 255
     344:	70 e0       	ldi	r23, 0x00	; 0
     346:	0e 94 29 05 	call	0xa52	; 0xa52 <__divmodhi4>
uint8_t HID_read_joystick_axis(JOY_AXIS axis) {
	uint8_t adc_val = ADC_read_blocking(axis);
	uint8_t current_joy_val;
	if(axis == X_AXIS) {
		current_joy_val = mapToRange(adc_val - joystick_calibration_values.x_offset, 0-joystick_calibration_values.x_offset, 255-joystick_calibration_values.x_offset, 0, 255);
		if((current_joy_val > 127 + joystick_calibration_values.x_deadzone) | (current_joy_val < 127 - joystick_calibration_values.x_deadzone)) {
     34a:	9b 01       	movw	r18, r22
     34c:	33 27       	eor	r19, r19
     34e:	40 91 8c 04 	lds	r20, 0x048C
     352:	50 e0       	ldi	r21, 0x00	; 0
     354:	8f e7       	ldi	r24, 0x7F	; 127
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	84 1b       	sub	r24, r20
     35a:	95 0b       	sbc	r25, r21
     35c:	e1 e0       	ldi	r30, 0x01	; 1
     35e:	28 17       	cp	r18, r24
     360:	39 07       	cpc	r19, r25
     362:	0c f0       	brlt	.+2      	; 0x366 <HID_read_joystick_axis+0x38>
     364:	e0 e0       	ldi	r30, 0x00	; 0
     366:	e1 11       	cpse	r30, r1
     368:	09 c0       	rjmp	.+18     	; 0x37c <HID_read_joystick_axis+0x4e>
     36a:	41 58       	subi	r20, 0x81	; 129
     36c:	5f 4f       	sbci	r21, 0xFF	; 255
     36e:	81 e0       	ldi	r24, 0x01	; 1
     370:	42 17       	cp	r20, r18
     372:	53 07       	cpc	r21, r19
     374:	0c f0       	brlt	.+2      	; 0x378 <HID_read_joystick_axis+0x4a>
     376:	80 e0       	ldi	r24, 0x00	; 0
     378:	88 23       	and	r24, r24
     37a:	29 f1       	breq	.+74     	; 0x3c6 <HID_read_joystick_axis+0x98>
			return current_joy_val;
     37c:	86 2f       	mov	r24, r22
     37e:	26 c0       	rjmp	.+76     	; 0x3cc <HID_read_joystick_axis+0x9e>
#include "ADC_driver.h"

JOY_CALIBRATE joystick_calibration_values;

int16_t mapToRange(int16_t input, int16_t input_min, int16_t input_max, int16_t output_min, int16_t output_max) {
	return (input - input_min)*(output_max - output_min)/(input_max - input_min) + output_min;
     380:	2f ef       	ldi	r18, 0xFF	; 255
     382:	82 9f       	mul	r24, r18
     384:	c0 01       	movw	r24, r0
     386:	11 24       	eor	r1, r1
     388:	6f ef       	ldi	r22, 0xFF	; 255
     38a:	70 e0       	ldi	r23, 0x00	; 0
     38c:	0e 94 29 05 	call	0xa52	; 0xa52 <__divmodhi4>
		} else {
			return 127;
		}
	} else {
		current_joy_val = mapToRange(adc_val - joystick_calibration_values.y_offset, 0-joystick_calibration_values.y_offset, 255-joystick_calibration_values.y_offset, 0, 255);
		if((current_joy_val > 127 + joystick_calibration_values.y_deadzone) | (current_joy_val < 127 - joystick_calibration_values.y_deadzone)) {
     390:	9b 01       	movw	r18, r22
     392:	33 27       	eor	r19, r19
     394:	40 91 8d 04 	lds	r20, 0x048D
     398:	50 e0       	ldi	r21, 0x00	; 0
     39a:	8f e7       	ldi	r24, 0x7F	; 127
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	84 1b       	sub	r24, r20
     3a0:	95 0b       	sbc	r25, r21
     3a2:	e1 e0       	ldi	r30, 0x01	; 1
     3a4:	28 17       	cp	r18, r24
     3a6:	39 07       	cpc	r19, r25
     3a8:	0c f0       	brlt	.+2      	; 0x3ac <HID_read_joystick_axis+0x7e>
     3aa:	e0 e0       	ldi	r30, 0x00	; 0
     3ac:	e1 11       	cpse	r30, r1
     3ae:	09 c0       	rjmp	.+18     	; 0x3c2 <HID_read_joystick_axis+0x94>
     3b0:	41 58       	subi	r20, 0x81	; 129
     3b2:	5f 4f       	sbci	r21, 0xFF	; 255
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	42 17       	cp	r20, r18
     3b8:	53 07       	cpc	r21, r19
     3ba:	0c f0       	brlt	.+2      	; 0x3be <HID_read_joystick_axis+0x90>
     3bc:	80 e0       	ldi	r24, 0x00	; 0
     3be:	88 23       	and	r24, r24
     3c0:	21 f0       	breq	.+8      	; 0x3ca <HID_read_joystick_axis+0x9c>
			return current_joy_val;
     3c2:	86 2f       	mov	r24, r22
     3c4:	03 c0       	rjmp	.+6      	; 0x3cc <HID_read_joystick_axis+0x9e>
	if(axis == X_AXIS) {
		current_joy_val = mapToRange(adc_val - joystick_calibration_values.x_offset, 0-joystick_calibration_values.x_offset, 255-joystick_calibration_values.x_offset, 0, 255);
		if((current_joy_val > 127 + joystick_calibration_values.x_deadzone) | (current_joy_val < 127 - joystick_calibration_values.x_deadzone)) {
			return current_joy_val;
		} else {
			return 127;
     3c6:	8f e7       	ldi	r24, 0x7F	; 127
     3c8:	01 c0       	rjmp	.+2      	; 0x3cc <HID_read_joystick_axis+0x9e>
	} else {
		current_joy_val = mapToRange(adc_val - joystick_calibration_values.y_offset, 0-joystick_calibration_values.y_offset, 255-joystick_calibration_values.y_offset, 0, 255);
		if((current_joy_val > 127 + joystick_calibration_values.y_deadzone) | (current_joy_val < 127 - joystick_calibration_values.y_deadzone)) {
			return current_joy_val;
		} else {
			return 127;
     3ca:	8f e7       	ldi	r24, 0x7F	; 127
		}
	}
}
     3cc:	cf 91       	pop	r28
     3ce:	08 95       	ret

000003d0 <HID_joystick_zero>:
	} else {
		printf("Joystick calibrated.\n");
	}
}

uint8_t HID_joystick_zero(JOY_AXIS axis) {
     3d0:	df 92       	push	r13
     3d2:	ef 92       	push	r14
     3d4:	ff 92       	push	r15
     3d6:	0f 93       	push	r16
     3d8:	1f 93       	push	r17
     3da:	cf 93       	push	r28
     3dc:	df 93       	push	r29
     3de:	f8 2e       	mov	r15, r24
     3e0:	c2 e3       	ldi	r28, 0x32	; 50
     3e2:	d0 e0       	ldi	r29, 0x00	; 0
	uint16_t center_sum = 0;
	uint8_t axis_max = 127;
	uint8_t axis_min = 127;
     3e4:	0f 2e       	mov	r0, r31
     3e6:	ff e7       	ldi	r31, 0x7F	; 127
     3e8:	ef 2e       	mov	r14, r31
     3ea:	f0 2d       	mov	r31, r0
	}
}

uint8_t HID_joystick_zero(JOY_AXIS axis) {
	uint16_t center_sum = 0;
	uint8_t axis_max = 127;
     3ec:	0f 2e       	mov	r0, r31
     3ee:	ff e7       	ldi	r31, 0x7F	; 127
     3f0:	df 2e       	mov	r13, r31
     3f2:	f0 2d       	mov	r31, r0
		printf("Joystick calibrated.\n");
	}
}

uint8_t HID_joystick_zero(JOY_AXIS axis) {
	uint16_t center_sum = 0;
     3f4:	00 e0       	ldi	r16, 0x00	; 0
     3f6:	10 e0       	ldi	r17, 0x00	; 0
	int8_t offset;
	uint8_t deadzone;
	
	int i;
	for (i = 0; i < 50; i++) {
		current_adc_val = ADC_read_blocking(axis);
     3f8:	8f 2d       	mov	r24, r15
     3fa:	0e 94 28 01 	call	0x250	; 0x250 <ADC_read_blocking>
		center_sum += current_adc_val;
     3fe:	08 0f       	add	r16, r24
     400:	11 1d       	adc	r17, r1
     402:	d8 16       	cp	r13, r24
     404:	08 f4       	brcc	.+2      	; 0x408 <HID_joystick_zero+0x38>
     406:	d8 2e       	mov	r13, r24
     408:	8e 15       	cp	r24, r14
     40a:	08 f4       	brcc	.+2      	; 0x40e <HID_joystick_zero+0x3e>
     40c:	e8 2e       	mov	r14, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     40e:	87 ef       	ldi	r24, 0xF7	; 247
     410:	9f e2       	ldi	r25, 0x2F	; 47
     412:	01 97       	sbiw	r24, 0x01	; 1
     414:	f1 f7       	brne	.-4      	; 0x412 <HID_joystick_zero+0x42>
     416:	00 c0       	rjmp	.+0      	; 0x418 <HID_joystick_zero+0x48>
     418:	00 00       	nop
     41a:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t current_adc_val;
	int8_t offset;
	uint8_t deadzone;
	
	int i;
	for (i = 0; i < 50; i++) {
     41c:	20 97       	sbiw	r28, 0x00	; 0
     41e:	61 f7       	brne	.-40     	; 0x3f8 <HID_joystick_zero+0x28>
			axis_min = current_adc_val;
		}
		_delay_ms(10);
	}
	
	offset = center_sum/50 - 127;
     420:	98 01       	movw	r18, r16
     422:	36 95       	lsr	r19
     424:	27 95       	ror	r18
     426:	ab e7       	ldi	r26, 0x7B	; 123
     428:	b4 e1       	ldi	r27, 0x14	; 20
     42a:	0e 94 5f 05 	call	0xabe	; 0xabe <__umulhisi3>
     42e:	96 95       	lsr	r25
     430:	87 95       	ror	r24
     432:	c1 e8       	ldi	r28, 0x81	; 129
     434:	c8 0f       	add	r28, r24
	
	if (abs(axis_max-127) > abs(axis_min-127)) {
     436:	4d 2d       	mov	r20, r13
     438:	50 e0       	ldi	r21, 0x00	; 0
     43a:	4f 57       	subi	r20, 0x7F	; 127
     43c:	51 09       	sbc	r21, r1
     43e:	9a 01       	movw	r18, r20
     440:	55 23       	and	r21, r21
     442:	24 f4       	brge	.+8      	; 0x44c <HID_joystick_zero+0x7c>
     444:	22 27       	eor	r18, r18
     446:	33 27       	eor	r19, r19
     448:	24 1b       	sub	r18, r20
     44a:	35 0b       	sbc	r19, r21
     44c:	a9 01       	movw	r20, r18
     44e:	6e 2d       	mov	r22, r14
     450:	70 e0       	ldi	r23, 0x00	; 0
     452:	6f 57       	subi	r22, 0x7F	; 127
     454:	71 09       	sbc	r23, r1
     456:	9b 01       	movw	r18, r22
     458:	77 23       	and	r23, r23
     45a:	24 f4       	brge	.+8      	; 0x464 <HID_joystick_zero+0x94>
     45c:	22 27       	eor	r18, r18
     45e:	33 27       	eor	r19, r19
     460:	26 1b       	sub	r18, r22
     462:	37 0b       	sbc	r19, r23
     464:	24 17       	cp	r18, r20
     466:	35 07       	cpc	r19, r21
     468:	14 f4       	brge	.+4      	; 0x46e <HID_joystick_zero+0x9e>
		deadzone = abs(axis_max-127);
     46a:	d4 2f       	mov	r29, r20
     46c:	01 c0       	rjmp	.+2      	; 0x470 <HID_joystick_zero+0xa0>
	} else {
		deadzone = abs(axis_min-127);
     46e:	d2 2f       	mov	r29, r18
	}
	
	if(axis == X_AXIS) {
     470:	f1 10       	cpse	r15, r1
     472:	25 c0       	rjmp	.+74     	; 0x4be <HID_joystick_zero+0xee>
		joystick_calibration_values.x_offset = offset;
     474:	c0 93 8a 04 	sts	0x048A, r28
		joystick_calibration_values.x_deadzone = deadzone;
     478:	0c e8       	ldi	r16, 0x8C	; 140
     47a:	14 e0       	ldi	r17, 0x04	; 4
     47c:	f8 01       	movw	r30, r16
     47e:	d0 83       	st	Z, r29
		printf("x offset: %d\n", joystick_calibration_values.x_offset);
     480:	8c 2f       	mov	r24, r28
     482:	99 27       	eor	r25, r25
     484:	87 fd       	sbrc	r24, 7
     486:	90 95       	com	r25
     488:	9f 93       	push	r25
     48a:	cf 93       	push	r28
     48c:	8c e1       	ldi	r24, 0x1C	; 28
     48e:	92 e0       	ldi	r25, 0x02	; 2
     490:	9f 93       	push	r25
     492:	8f 93       	push	r24
     494:	0e 94 2b 06 	call	0xc56	; 0xc56 <printf>
		printf("x deadzone: %d\n", joystick_calibration_values.x_deadzone);
     498:	f8 01       	movw	r30, r16
     49a:	80 81       	ld	r24, Z
     49c:	1f 92       	push	r1
     49e:	8f 93       	push	r24
     4a0:	6a e2       	ldi	r22, 0x2A	; 42
     4a2:	72 e0       	ldi	r23, 0x02	; 2
     4a4:	7f 93       	push	r23
     4a6:	6f 93       	push	r22
     4a8:	0e 94 2b 06 	call	0xc56	; 0xc56 <printf>
     4ac:	8d b7       	in	r24, 0x3d	; 61
     4ae:	9e b7       	in	r25, 0x3e	; 62
     4b0:	08 96       	adiw	r24, 0x08	; 8
     4b2:	0f b6       	in	r0, 0x3f	; 63
     4b4:	f8 94       	cli
     4b6:	9e bf       	out	0x3e, r25	; 62
     4b8:	0f be       	out	0x3f, r0	; 63
     4ba:	8d bf       	out	0x3d, r24	; 61
     4bc:	24 c0       	rjmp	.+72     	; 0x506 <__stack+0x7>
	} else {
		joystick_calibration_values.y_offset = offset;
     4be:	c0 93 8b 04 	sts	0x048B, r28
		joystick_calibration_values.y_deadzone = deadzone;
     4c2:	0d e8       	ldi	r16, 0x8D	; 141
     4c4:	14 e0       	ldi	r17, 0x04	; 4
     4c6:	f8 01       	movw	r30, r16
     4c8:	d0 83       	st	Z, r29
		printf("y offset: %d\n", joystick_calibration_values.y_offset);
     4ca:	6c 2f       	mov	r22, r28
     4cc:	77 27       	eor	r23, r23
     4ce:	67 fd       	sbrc	r22, 7
     4d0:	70 95       	com	r23
     4d2:	7f 93       	push	r23
     4d4:	cf 93       	push	r28
     4d6:	6a e3       	ldi	r22, 0x3A	; 58
     4d8:	72 e0       	ldi	r23, 0x02	; 2
     4da:	7f 93       	push	r23
     4dc:	6f 93       	push	r22
     4de:	0e 94 2b 06 	call	0xc56	; 0xc56 <printf>
		printf("y deadzone: %d\n", joystick_calibration_values.y_deadzone);
     4e2:	f8 01       	movw	r30, r16
     4e4:	80 81       	ld	r24, Z
     4e6:	1f 92       	push	r1
     4e8:	8f 93       	push	r24
     4ea:	68 e4       	ldi	r22, 0x48	; 72
     4ec:	72 e0       	ldi	r23, 0x02	; 2
     4ee:	7f 93       	push	r23
     4f0:	6f 93       	push	r22
     4f2:	0e 94 2b 06 	call	0xc56	; 0xc56 <printf>
     4f6:	8d b7       	in	r24, 0x3d	; 61
     4f8:	9e b7       	in	r25, 0x3e	; 62
     4fa:	08 96       	adiw	r24, 0x08	; 8
     4fc:	0f b6       	in	r0, 0x3f	; 63
     4fe:	f8 94       	cli
     500:	9e bf       	out	0x3e, r25	; 62
     502:	0f be       	out	0x3f, r0	; 63
     504:	8d bf       	out	0x3d, r24	; 61
	}
	return abs(deadzone)+abs(offset);
     506:	8c 2f       	mov	r24, r28
     508:	99 27       	eor	r25, r25
     50a:	87 fd       	sbrc	r24, 7
     50c:	90 95       	com	r25
     50e:	99 23       	and	r25, r25
     510:	1c f4       	brge	.+6      	; 0x518 <__stack+0x19>
     512:	91 95       	neg	r25
     514:	81 95       	neg	r24
     516:	91 09       	sbc	r25, r1
}
     518:	8d 0f       	add	r24, r29
     51a:	df 91       	pop	r29
     51c:	cf 91       	pop	r28
     51e:	1f 91       	pop	r17
     520:	0f 91       	pop	r16
     522:	ff 90       	pop	r15
     524:	ef 90       	pop	r14
     526:	df 90       	pop	r13
     528:	08 95       	ret

0000052a <HID_calibrate_joystick>:
			return 127;
		}
	}
}

void HID_calibrate_joystick(void) {
     52a:	cf 93       	push	r28
     52c:	df 93       	push	r29
	printf("Calibrating joystick...\n");
     52e:	88 e5       	ldi	r24, 0x58	; 88
     530:	92 e0       	ldi	r25, 0x02	; 2
     532:	0e 94 46 06 	call	0xc8c	; 0xc8c <puts>
	
	joystick_calibration_values.x_axis_min = 0;
     536:	10 92 87 04 	sts	0x0487, r1
	joystick_calibration_values.x_axis_max = 255;
     53a:	9f ef       	ldi	r25, 0xFF	; 255
     53c:	90 93 86 04 	sts	0x0486, r25
	joystick_calibration_values.x_offset = 0;
     540:	10 92 8a 04 	sts	0x048A, r1
	joystick_calibration_values.x_deadzone = 5;
     544:	85 e0       	ldi	r24, 0x05	; 5
     546:	80 93 8c 04 	sts	0x048C, r24
	
	joystick_calibration_values.y_axis_min = 0;
     54a:	10 92 89 04 	sts	0x0489, r1
	joystick_calibration_values.y_axis_max = 255;
     54e:	90 93 88 04 	sts	0x0488, r25
	joystick_calibration_values.y_offset = 0;
     552:	10 92 8b 04 	sts	0x048B, r1
	joystick_calibration_values.y_deadzone = 5;
     556:	80 93 8d 04 	sts	0x048D, r24
	
	uint16_t x_offset_deadzone_sum = HID_joystick_zero(X_AXIS);
     55a:	80 e0       	ldi	r24, 0x00	; 0
     55c:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <HID_joystick_zero>
     560:	c8 2f       	mov	r28, r24
	uint16_t y_offset_deadzone_sum = HID_joystick_zero(Y_AXIS);
     562:	81 e0       	ldi	r24, 0x01	; 1
     564:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <HID_joystick_zero>
     568:	d8 2f       	mov	r29, r24
	
	if (x_offset_deadzone_sum > 15) {
     56a:	c0 31       	cpi	r28, 0x10	; 16
     56c:	b0 f0       	brcs	.+44     	; 0x59a <HID_calibrate_joystick+0x70>
		printf("X axis calibration failed! (Offset+deadzone out of bounds)\n");
     56e:	80 e7       	ldi	r24, 0x70	; 112
     570:	92 e0       	ldi	r25, 0x02	; 2
     572:	0e 94 46 06 	call	0xc8c	; 0xc8c <puts>
	} else {
		/*printf("X axis calibrated.\n");*/
	}
	
	if (y_offset_deadzone_sum > 15) {
     576:	d0 31       	cpi	r29, 0x10	; 16
     578:	20 f0       	brcs	.+8      	; 0x582 <HID_calibrate_joystick+0x58>
		printf("Y axis calibration failed! (Offset+deadzone out of bounds)\n");
     57a:	8b ea       	ldi	r24, 0xAB	; 171
     57c:	92 e0       	ldi	r25, 0x02	; 2
     57e:	0e 94 46 06 	call	0xc8c	; 0xc8c <puts>
	} else {
		/*printf("Y axis calibrated.\n");*/
	}
	
	if (x_offset_deadzone_sum > 15 || y_offset_deadzone_sum > 15) {
		printf("[!] Joystick calibration failed! Retrying.\n");
     582:	86 ee       	ldi	r24, 0xE6	; 230
     584:	92 e0       	ldi	r25, 0x02	; 2
     586:	0e 94 46 06 	call	0xc8c	; 0xc8c <puts>
		HID_calibrate_joystick();
     58a:	0e 94 95 02 	call	0x52a	; 0x52a <HID_calibrate_joystick>
     58e:	08 c0       	rjmp	.+16     	; 0x5a0 <HID_calibrate_joystick+0x76>
	} else {
		printf("Joystick calibrated.\n");
     590:	81 e1       	ldi	r24, 0x11	; 17
     592:	93 e0       	ldi	r25, 0x03	; 3
     594:	0e 94 46 06 	call	0xc8c	; 0xc8c <puts>
     598:	03 c0       	rjmp	.+6      	; 0x5a0 <HID_calibrate_joystick+0x76>
		printf("X axis calibration failed! (Offset+deadzone out of bounds)\n");
	} else {
		/*printf("X axis calibrated.\n");*/
	}
	
	if (y_offset_deadzone_sum > 15) {
     59a:	80 31       	cpi	r24, 0x10	; 16
     59c:	c8 f3       	brcs	.-14     	; 0x590 <HID_calibrate_joystick+0x66>
     59e:	ed cf       	rjmp	.-38     	; 0x57a <HID_calibrate_joystick+0x50>
		printf("[!] Joystick calibration failed! Retrying.\n");
		HID_calibrate_joystick();
	} else {
		printf("Joystick calibrated.\n");
	}
}
     5a0:	df 91       	pop	r29
     5a2:	cf 91       	pop	r28
     5a4:	08 95       	ret

000005a6 <HID_read_joystick>:
		printf("y deadzone: %d\n", joystick_calibration_values.y_deadzone);
	}
	return abs(deadzone)+abs(offset);
}

JOY_VALS HID_read_joystick() {
     5a6:	0f 93       	push	r16
     5a8:	1f 93       	push	r17
     5aa:	cf 93       	push	r28
	JOY_VALS joystick_values;
	joystick_values.x_axis = mapToRange(HID_read_joystick_axis(X_AXIS), 0, 255, -50, 51)*2;
     5ac:	80 e0       	ldi	r24, 0x00	; 0
     5ae:	0e 94 97 01 	call	0x32e	; 0x32e <HID_read_joystick_axis>
     5b2:	18 2f       	mov	r17, r24
	joystick_values.y_axis = mapToRange(HID_read_joystick_axis(Y_AXIS), 0, 255, -50, 51)*2;
     5b4:	81 e0       	ldi	r24, 0x01	; 1
     5b6:	0e 94 97 01 	call	0x32e	; 0x32e <HID_read_joystick_axis>
     5ba:	c8 2f       	mov	r28, r24
#include "ADC_driver.h"

JOY_CALIBRATE joystick_calibration_values;

int16_t mapToRange(int16_t input, int16_t input_min, int16_t input_max, int16_t output_min, int16_t output_max) {
	return (input - input_min)*(output_max - output_min)/(input_max - input_min) + output_min;
     5bc:	45 e6       	ldi	r20, 0x65	; 101
     5be:	41 9f       	mul	r20, r17
     5c0:	c0 01       	movw	r24, r0
     5c2:	11 24       	eor	r1, r1
     5c4:	ef ef       	ldi	r30, 0xFF	; 255
     5c6:	f0 e0       	ldi	r31, 0x00	; 0
     5c8:	bf 01       	movw	r22, r30
     5ca:	0e 94 29 05 	call	0xa52	; 0xa52 <__divmodhi4>
     5ce:	62 53       	subi	r22, 0x32	; 50
     5d0:	71 09       	sbc	r23, r1

JOY_VALS HID_read_joystick() {
	JOY_VALS joystick_values;
	joystick_values.x_axis = mapToRange(HID_read_joystick_axis(X_AXIS), 0, 255, -50, 51)*2;
	joystick_values.y_axis = mapToRange(HID_read_joystick_axis(Y_AXIS), 0, 255, -50, 51)*2;
	return joystick_values;
     5d2:	8b 01       	movw	r16, r22
     5d4:	00 0f       	add	r16, r16
     5d6:	11 1f       	adc	r17, r17
#include "ADC_driver.h"

JOY_CALIBRATE joystick_calibration_values;

int16_t mapToRange(int16_t input, int16_t input_min, int16_t input_max, int16_t output_min, int16_t output_max) {
	return (input - input_min)*(output_max - output_min)/(input_max - input_min) + output_min;
     5d8:	4c 9f       	mul	r20, r28
     5da:	c0 01       	movw	r24, r0
     5dc:	11 24       	eor	r1, r1
     5de:	bf 01       	movw	r22, r30
     5e0:	0e 94 29 05 	call	0xa52	; 0xa52 <__divmodhi4>
     5e4:	62 53       	subi	r22, 0x32	; 50
     5e6:	71 09       	sbc	r23, r1

JOY_VALS HID_read_joystick() {
	JOY_VALS joystick_values;
	joystick_values.x_axis = mapToRange(HID_read_joystick_axis(X_AXIS), 0, 255, -50, 51)*2;
	joystick_values.y_axis = mapToRange(HID_read_joystick_axis(Y_AXIS), 0, 255, -50, 51)*2;
	return joystick_values;
     5e8:	9b 01       	movw	r18, r22
     5ea:	22 0f       	add	r18, r18
     5ec:	33 1f       	adc	r19, r19
}
     5ee:	c9 01       	movw	r24, r18
     5f0:	b8 01       	movw	r22, r16
     5f2:	cf 91       	pop	r28
     5f4:	1f 91       	pop	r17
     5f6:	0f 91       	pop	r16
     5f8:	08 95       	ret

000005fa <HID_read_joystick_direction>:

JOY_DIR HID_read_joystick_direction() {
     5fa:	cf 93       	push	r28
     5fc:	df 93       	push	r29
	int16_t x = HID_read_joystick_axis(X_AXIS)-127;
     5fe:	80 e0       	ldi	r24, 0x00	; 0
     600:	0e 94 97 01 	call	0x32e	; 0x32e <HID_read_joystick_axis>
     604:	c8 2f       	mov	r28, r24
     606:	d0 e0       	ldi	r29, 0x00	; 0
     608:	cf 57       	subi	r28, 0x7F	; 127
     60a:	d1 09       	sbc	r29, r1
	int16_t y = HID_read_joystick_axis(Y_AXIS)-127;
     60c:	81 e0       	ldi	r24, 0x01	; 1
     60e:	0e 94 97 01 	call	0x32e	; 0x32e <HID_read_joystick_axis>
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	8f 57       	subi	r24, 0x7F	; 127
     616:	91 09       	sbc	r25, r1
	if (x == 0 && y == 0) {
     618:	20 97       	sbiw	r28, 0x00	; 0
     61a:	11 f4       	brne	.+4      	; 0x620 <HID_read_joystick_direction+0x26>
     61c:	00 97       	sbiw	r24, 0x00	; 0
     61e:	e1 f0       	breq	.+56     	; 0x658 <HID_read_joystick_direction+0x5e>
		return CENTER;
	} else {
		if (abs(y) > abs(x)) {
     620:	ac 01       	movw	r20, r24
     622:	99 23       	and	r25, r25
     624:	24 f4       	brge	.+8      	; 0x62e <HID_read_joystick_direction+0x34>
     626:	44 27       	eor	r20, r20
     628:	55 27       	eor	r21, r21
     62a:	48 1b       	sub	r20, r24
     62c:	59 0b       	sbc	r21, r25
     62e:	9e 01       	movw	r18, r28
     630:	dd 23       	and	r29, r29
     632:	24 f4       	brge	.+8      	; 0x63c <HID_read_joystick_direction+0x42>
     634:	22 27       	eor	r18, r18
     636:	33 27       	eor	r19, r19
     638:	2c 1b       	sub	r18, r28
     63a:	3d 0b       	sbc	r19, r29
     63c:	24 17       	cp	r18, r20
     63e:	35 07       	cpc	r19, r21
     640:	2c f4       	brge	.+10     	; 0x64c <HID_read_joystick_direction+0x52>
			if (y > 0) {
     642:	18 16       	cp	r1, r24
     644:	19 06       	cpc	r1, r25
     646:	54 f4       	brge	.+20     	; 0x65c <HID_read_joystick_direction+0x62>
				return UP;
     648:	82 e0       	ldi	r24, 0x02	; 2
     64a:	09 c0       	rjmp	.+18     	; 0x65e <HID_read_joystick_direction+0x64>
			} else {
				return DOWN;
			}
		} else {
			if (x > 0) {
     64c:	81 e0       	ldi	r24, 0x01	; 1
     64e:	1c 16       	cp	r1, r28
     650:	1d 06       	cpc	r1, r29
     652:	2c f0       	brlt	.+10     	; 0x65e <HID_read_joystick_direction+0x64>
     654:	80 e0       	ldi	r24, 0x00	; 0
     656:	03 c0       	rjmp	.+6      	; 0x65e <HID_read_joystick_direction+0x64>

JOY_DIR HID_read_joystick_direction() {
	int16_t x = HID_read_joystick_axis(X_AXIS)-127;
	int16_t y = HID_read_joystick_axis(Y_AXIS)-127;
	if (x == 0 && y == 0) {
		return CENTER;
     658:	84 e0       	ldi	r24, 0x04	; 4
     65a:	01 c0       	rjmp	.+2      	; 0x65e <HID_read_joystick_direction+0x64>
	} else {
		if (abs(y) > abs(x)) {
			if (y > 0) {
				return UP;
			} else {
				return DOWN;
     65c:	83 e0       	ldi	r24, 0x03	; 3
			} else {
				return LEFT;
			}
		}
	}
}
     65e:	df 91       	pop	r29
     660:	cf 91       	pop	r28
     662:	08 95       	ret

00000664 <HID_read_slider>:

uint8_t HID_read_slider(TOUCH_DEVICE device) {
	if (device != LEFT_SLIDER && device != RIGHT_SLIDER) {
     664:	9e ef       	ldi	r25, 0xFE	; 254
     666:	98 0f       	add	r25, r24
     668:	92 30       	cpi	r25, 0x02	; 2
     66a:	50 f0       	brcs	.+20     	; 0x680 <HID_read_slider+0x1c>
		printf("read_slider called with invalid device");
     66c:	86 e2       	ldi	r24, 0x26	; 38
     66e:	93 e0       	ldi	r25, 0x03	; 3
     670:	9f 93       	push	r25
     672:	8f 93       	push	r24
     674:	0e 94 2b 06 	call	0xc56	; 0xc56 <printf>
		return 0;
     678:	0f 90       	pop	r0
     67a:	0f 90       	pop	r0
     67c:	80 e0       	ldi	r24, 0x00	; 0
     67e:	08 95       	ret
	}
	return ADC_read_blocking(device);
     680:	0e 94 28 01 	call	0x250	; 0x250 <ADC_read_blocking>
}
     684:	08 95       	ret

00000686 <HID_read_touch_button>:

uint8_t HID_read_touch_button(TOUCH_DEVICE device) {
	if (device != LEFT_BUTTON && device != RIGHT_BUTTON) {
     686:	9c ef       	ldi	r25, 0xFC	; 252
     688:	98 0f       	add	r25, r24
     68a:	92 30       	cpi	r25, 0x02	; 2
     68c:	50 f0       	brcs	.+20     	; 0x6a2 <HID_read_touch_button+0x1c>
		printf("read_touch_button called with invalid device");
     68e:	8d e4       	ldi	r24, 0x4D	; 77
     690:	93 e0       	ldi	r25, 0x03	; 3
     692:	9f 93       	push	r25
     694:	8f 93       	push	r24
     696:	0e 94 2b 06 	call	0xc56	; 0xc56 <printf>
		return 0;
     69a:	0f 90       	pop	r0
     69c:	0f 90       	pop	r0
     69e:	80 e0       	ldi	r24, 0x00	; 0
     6a0:	08 95       	ret
	}
    switch(device) {
     6a2:	84 30       	cpi	r24, 0x04	; 4
     6a4:	19 f0       	breq	.+6      	; 0x6ac <HID_read_touch_button+0x26>
     6a6:	85 30       	cpi	r24, 0x05	; 5
     6a8:	39 f0       	breq	.+14     	; 0x6b8 <HID_read_touch_button+0x32>
     6aa:	0b c0       	rjmp	.+22     	; 0x6c2 <HID_read_touch_button+0x3c>
        case LEFT_BUTTON:
            clear_bit(DDRB, PB3);
     6ac:	bb 98       	cbi	0x17, 3	; 23
            if (PINB & (1 << PB3)) {
     6ae:	86 b3       	in	r24, 0x16	; 22
     6b0:	83 fb       	bst	r24, 3
     6b2:	88 27       	eor	r24, r24
     6b4:	80 f9       	bld	r24, 0
     6b6:	08 95       	ret
				return 1;
			} else {
				return 0;
			}
        case RIGHT_BUTTON:
            clear_bit(DDRB, PB4);
     6b8:	bc 98       	cbi	0x17, 4	; 23
            if (PINB & (1 << PB4)){
     6ba:	86 b3       	in	r24, 0x16	; 22
     6bc:	82 95       	swap	r24
     6be:	81 70       	andi	r24, 0x01	; 1
     6c0:	08 95       	ret
	            return 1;
	        } else {
	            return 0;
            }
    }
	return 0;
     6c2:	80 e0       	ldi	r24, 0x00	; 0
}
     6c4:	08 95       	ret

000006c6 <EXTMEM_init>:
#include <stdio.h>
#include "../macros.h"
#include "../utils/SRAM_utils.h"

void EXTMEM_init(void) {
	printf("Initializing external memory...\n");
     6c6:	8a e7       	ldi	r24, 0x7A	; 122
     6c8:	93 e0       	ldi	r25, 0x03	; 3
     6ca:	0e 94 46 06 	call	0xc8c	; 0xc8c <puts>
	set_bit(MCUCR, SRE); // Enable external memory
     6ce:	85 b7       	in	r24, 0x35	; 53
     6d0:	80 68       	ori	r24, 0x80	; 128
     6d2:	85 bf       	out	0x35, r24	; 53
	set_bit(SFIOR, XMM2); // Mask the 4 JTAG bits on port C
     6d4:	80 b7       	in	r24, 0x30	; 48
     6d6:	80 62       	ori	r24, 0x20	; 32
     6d8:	80 bf       	out	0x30, r24	; 48
	if (SRAM_test() == 0) {
     6da:	0e 94 78 04 	call	0x8f0	; 0x8f0 <SRAM_test>
     6de:	89 2b       	or	r24, r25
     6e0:	29 f4       	brne	.+10     	; 0x6ec <EXTMEM_init+0x26>
		printf("External memory initialized.\n");
     6e2:	8a e9       	ldi	r24, 0x9A	; 154
     6e4:	93 e0       	ldi	r25, 0x03	; 3
     6e6:	0e 94 46 06 	call	0xc8c	; 0xc8c <puts>
     6ea:	08 95       	ret
	} else {
		printf("[!] External memory initialization failed!\n");
     6ec:	87 eb       	ldi	r24, 0xB7	; 183
     6ee:	93 e0       	ldi	r25, 0x03	; 3
     6f0:	0e 94 46 06 	call	0xc8c	; 0xc8c <puts>
     6f4:	08 95       	ret

000006f6 <OLED_reset>:

volatile uint8_t * OLED_command_address = (uint8_t*)0x1000;
volatile uint8_t * OLED_data_address = (uint8_t*)0x1200;

void OLED_command( uint8_t command){
  *OLED_command_address=command;
     6f6:	e0 91 0e 01 	lds	r30, 0x010E
     6fa:	f0 91 0f 01 	lds	r31, 0x010F
     6fe:	8e ea       	ldi	r24, 0xAE	; 174
     700:	80 83       	st	Z, r24
     702:	e0 91 0e 01 	lds	r30, 0x010E
     706:	f0 91 0f 01 	lds	r31, 0x010F
     70a:	81 ea       	ldi	r24, 0xA1	; 161
     70c:	80 83       	st	Z, r24
     70e:	e0 91 0e 01 	lds	r30, 0x010E
     712:	f0 91 0f 01 	lds	r31, 0x010F
     716:	8a ed       	ldi	r24, 0xDA	; 218
     718:	80 83       	st	Z, r24
     71a:	e0 91 0e 01 	lds	r30, 0x010E
     71e:	f0 91 0f 01 	lds	r31, 0x010F
     722:	82 e1       	ldi	r24, 0x12	; 18
     724:	80 83       	st	Z, r24
     726:	e0 91 0e 01 	lds	r30, 0x010E
     72a:	f0 91 0f 01 	lds	r31, 0x010F
     72e:	88 ec       	ldi	r24, 0xC8	; 200
     730:	80 83       	st	Z, r24
     732:	e0 91 0e 01 	lds	r30, 0x010E
     736:	f0 91 0f 01 	lds	r31, 0x010F
     73a:	88 ea       	ldi	r24, 0xA8	; 168
     73c:	80 83       	st	Z, r24
     73e:	e0 91 0e 01 	lds	r30, 0x010E
     742:	f0 91 0f 01 	lds	r31, 0x010F
     746:	8f e3       	ldi	r24, 0x3F	; 63
     748:	80 83       	st	Z, r24
     74a:	e0 91 0e 01 	lds	r30, 0x010E
     74e:	f0 91 0f 01 	lds	r31, 0x010F
     752:	85 ed       	ldi	r24, 0xD5	; 213
     754:	80 83       	st	Z, r24
     756:	e0 91 0e 01 	lds	r30, 0x010E
     75a:	f0 91 0f 01 	lds	r31, 0x010F
     75e:	80 e8       	ldi	r24, 0x80	; 128
     760:	80 83       	st	Z, r24
     762:	e0 91 0e 01 	lds	r30, 0x010E
     766:	f0 91 0f 01 	lds	r31, 0x010F
     76a:	81 e8       	ldi	r24, 0x81	; 129
     76c:	80 83       	st	Z, r24
     76e:	e0 91 0e 01 	lds	r30, 0x010E
     772:	f0 91 0f 01 	lds	r31, 0x010F
     776:	80 e5       	ldi	r24, 0x50	; 80
     778:	80 83       	st	Z, r24
     77a:	e0 91 0e 01 	lds	r30, 0x010E
     77e:	f0 91 0f 01 	lds	r31, 0x010F
     782:	89 ed       	ldi	r24, 0xD9	; 217
     784:	80 83       	st	Z, r24
     786:	e0 91 0e 01 	lds	r30, 0x010E
     78a:	f0 91 0f 01 	lds	r31, 0x010F
     78e:	81 e2       	ldi	r24, 0x21	; 33
     790:	80 83       	st	Z, r24
     792:	e0 91 0e 01 	lds	r30, 0x010E
     796:	f0 91 0f 01 	lds	r31, 0x010F
     79a:	80 e2       	ldi	r24, 0x20	; 32
     79c:	80 83       	st	Z, r24
     79e:	e0 91 0e 01 	lds	r30, 0x010E
     7a2:	f0 91 0f 01 	lds	r31, 0x010F
     7a6:	10 82       	st	Z, r1
     7a8:	e0 91 0e 01 	lds	r30, 0x010E
     7ac:	f0 91 0f 01 	lds	r31, 0x010F
     7b0:	8b ed       	ldi	r24, 0xDB	; 219
     7b2:	80 83       	st	Z, r24
     7b4:	e0 91 0e 01 	lds	r30, 0x010E
     7b8:	f0 91 0f 01 	lds	r31, 0x010F
     7bc:	80 e3       	ldi	r24, 0x30	; 48
     7be:	80 83       	st	Z, r24
     7c0:	e0 91 0e 01 	lds	r30, 0x010E
     7c4:	f0 91 0f 01 	lds	r31, 0x010F
     7c8:	8d ea       	ldi	r24, 0xAD	; 173
     7ca:	80 83       	st	Z, r24
     7cc:	e0 91 0e 01 	lds	r30, 0x010E
     7d0:	f0 91 0f 01 	lds	r31, 0x010F
     7d4:	10 82       	st	Z, r1
     7d6:	e0 91 0e 01 	lds	r30, 0x010E
     7da:	f0 91 0f 01 	lds	r31, 0x010F
     7de:	84 ea       	ldi	r24, 0xA4	; 164
     7e0:	80 83       	st	Z, r24
     7e2:	e0 91 0e 01 	lds	r30, 0x010E
     7e6:	f0 91 0f 01 	lds	r31, 0x010F
     7ea:	86 ea       	ldi	r24, 0xA6	; 166
     7ec:	80 83       	st	Z, r24
     7ee:	e0 91 0e 01 	lds	r30, 0x010E
     7f2:	f0 91 0f 01 	lds	r31, 0x010F
     7f6:	8f ea       	ldi	r24, 0xAF	; 175
     7f8:	80 83       	st	Z, r24
     7fa:	08 95       	ret

000007fc <OLED_init>:

const unsigned char re_init_error[] PROGMEM = "you already have initialized OLED!\n";

uint8_t * OLED_vram=NULL;
void OLED_init() {
  OLED_reset();
     7fc:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <OLED_reset>
  
  if ( !OLED_vram){
     800:	80 91 84 04 	lds	r24, 0x0484
     804:	90 91 85 04 	lds	r25, 0x0485
     808:	89 2b       	or	r24, r25
     80a:	41 f4       	brne	.+16     	; 0x81c <OLED_init+0x20>
    OLED_vram = SRAM_allocate(1024);
     80c:	80 e0       	ldi	r24, 0x00	; 0
     80e:	94 e0       	ldi	r25, 0x04	; 4
     810:	0e 94 0c 05 	call	0xa18	; 0xa18 <SRAM_allocate>
     814:	90 93 85 04 	sts	0x0485, r25
     818:	80 93 84 04 	sts	0x0484, r24
     81c:	08 95       	ret

0000081e <OLED_draw>:
    OLED_command(0xa6); //set normal display
    OLED_command(0xaf);// display on
}

void OLED_draw(){
  for ( int i = 0 ; i < 512;i++){
     81e:	80 e0       	ldi	r24, 0x00	; 0
     820:	90 e0       	ldi	r25, 0x00	; 0
    OLED_data_address[i] = OLED_vram[i]%256;
     822:	e0 91 0c 01 	lds	r30, 0x010C
     826:	f0 91 0d 01 	lds	r31, 0x010D
     82a:	e8 0f       	add	r30, r24
     82c:	f9 1f       	adc	r31, r25
     82e:	a0 91 84 04 	lds	r26, 0x0484
     832:	b0 91 85 04 	lds	r27, 0x0485
     836:	a8 0f       	add	r26, r24
     838:	b9 1f       	adc	r27, r25
     83a:	2c 91       	ld	r18, X
     83c:	20 83       	st	Z, r18
    OLED_command(0xa6); //set normal display
    OLED_command(0xaf);// display on
}

void OLED_draw(){
  for ( int i = 0 ; i < 512;i++){
     83e:	01 96       	adiw	r24, 0x01	; 1
     840:	81 15       	cp	r24, r1
     842:	22 e0       	ldi	r18, 0x02	; 2
     844:	92 07       	cpc	r25, r18
     846:	69 f7       	brne	.-38     	; 0x822 <OLED_draw+0x4>
     848:	80 e0       	ldi	r24, 0x00	; 0
     84a:	90 e0       	ldi	r25, 0x00	; 0
    OLED_data_address[i] = OLED_vram[i]%256;
  }
  for ( int i = 0 ; i < 512;i++){
    OLED_data_address[i] = OLED_vram[i+512]%256;
     84c:	e0 91 0c 01 	lds	r30, 0x010C
     850:	f0 91 0d 01 	lds	r31, 0x010D
     854:	e8 0f       	add	r30, r24
     856:	f9 1f       	adc	r31, r25
     858:	a0 91 84 04 	lds	r26, 0x0484
     85c:	b0 91 85 04 	lds	r27, 0x0485
     860:	a8 0f       	add	r26, r24
     862:	b9 1f       	adc	r27, r25
     864:	be 5f       	subi	r27, 0xFE	; 254
     866:	2c 91       	ld	r18, X
     868:	20 83       	st	Z, r18

void OLED_draw(){
  for ( int i = 0 ; i < 512;i++){
    OLED_data_address[i] = OLED_vram[i]%256;
  }
  for ( int i = 0 ; i < 512;i++){
     86a:	01 96       	adiw	r24, 0x01	; 1
     86c:	81 15       	cp	r24, r1
     86e:	22 e0       	ldi	r18, 0x02	; 2
     870:	92 07       	cpc	r25, r18
     872:	61 f7       	brne	.-40     	; 0x84c <OLED_draw+0x2e>
    OLED_data_address[i] = OLED_vram[i+512]%256;
  }
}
     874:	08 95       	ret

00000876 <UART0_init>:
#include <stdio.h>
#include <avr/io.h>

#include "UART_driver.h"

void UART0_init(uint32_t clock, uint32_t baud){
     876:	0f 93       	push	r16
     878:	1f 93       	push	r17
	uint32_t ubrr = (clock /(16 * baud)) - 1;
     87a:	89 01       	movw	r16, r18
     87c:	9a 01       	movw	r18, r20
     87e:	00 0f       	add	r16, r16
     880:	11 1f       	adc	r17, r17
     882:	22 1f       	adc	r18, r18
     884:	33 1f       	adc	r19, r19
     886:	00 0f       	add	r16, r16
     888:	11 1f       	adc	r17, r17
     88a:	22 1f       	adc	r18, r18
     88c:	33 1f       	adc	r19, r19
     88e:	a9 01       	movw	r20, r18
     890:	98 01       	movw	r18, r16
     892:	22 0f       	add	r18, r18
     894:	33 1f       	adc	r19, r19
     896:	44 1f       	adc	r20, r20
     898:	55 1f       	adc	r21, r21
     89a:	22 0f       	add	r18, r18
     89c:	33 1f       	adc	r19, r19
     89e:	44 1f       	adc	r20, r20
     8a0:	55 1f       	adc	r21, r21
     8a2:	0e 94 3d 05 	call	0xa7a	; 0xa7a <__udivmodsi4>
     8a6:	da 01       	movw	r26, r20
     8a8:	c9 01       	movw	r24, r18
     8aa:	01 97       	sbiw	r24, 0x01	; 1
     8ac:	a1 09       	sbc	r26, r1
     8ae:	b1 09       	sbc	r27, r1
	UBRR0H = (unsigned char) (ubrr >> 8);
     8b0:	49 2f       	mov	r20, r25
     8b2:	5a 2f       	mov	r21, r26
     8b4:	6b 2f       	mov	r22, r27
     8b6:	77 27       	eor	r23, r23
     8b8:	40 bd       	out	0x20, r20	; 32
	UBRR0L = (unsigned char) (ubrr);
     8ba:	89 b9       	out	0x09, r24	; 9
	UCSR0B = (1 << RXEN0) | (1 << TXEN0); // Set RX-enable and TX-enable bits
     8bc:	88 e1       	ldi	r24, 0x18	; 24
     8be:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = (1 << URSEL0) | (0b11 << UCSZ00) | (0b00 << UPM00) | (1 << USBS0); // ( UCSR0C register enable ) | ( 8-bit character size ) | ( disable parity ) | ( 2 stop bits )
     8c0:	8e e8       	ldi	r24, 0x8E	; 142
     8c2:	80 bd       	out	0x20, r24	; 32

	FILE * uart0_stream = fdevopen(UART0_put,NULL);
     8c4:	60 e0       	ldi	r22, 0x00	; 0
     8c6:	70 e0       	ldi	r23, 0x00	; 0
     8c8:	83 e7       	ldi	r24, 0x73	; 115
     8ca:	94 e0       	ldi	r25, 0x04	; 4
     8cc:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <fdevopen>
	stdout = uart0_stream;
     8d0:	90 93 91 04 	sts	0x0491, r25
     8d4:	80 93 90 04 	sts	0x0490, r24
}
     8d8:	1f 91       	pop	r17
     8da:	0f 91       	pop	r16
     8dc:	08 95       	ret

000008de <UART0_transmit>:

void UART0_transmit(unsigned char c) {
	while (! (UCSR0A & (1 << UDRE0)) ) {
     8de:	5d 9b       	sbis	0x0b, 5	; 11
     8e0:	fe cf       	rjmp	.-4      	; 0x8de <UART0_transmit>
	}
	UDR0 = c;
     8e2:	8c b9       	out	0x0c, r24	; 12
     8e4:	08 95       	ret

000008e6 <UART0_put>:
}

int UART0_put( char c, FILE * out){
	UART0_transmit(c);
     8e6:	0e 94 6f 04 	call	0x8de	; 0x8de <UART0_transmit>
	return 0;
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	08 95       	ret

000008f0 <SRAM_test>:
#include <util/delay.h>

#include "../drivers/EXTMEM_driver.h"

uint16_t SRAM_test(void)
{
     8f0:	6f 92       	push	r6
     8f2:	7f 92       	push	r7
     8f4:	8f 92       	push	r8
     8f6:	9f 92       	push	r9
     8f8:	af 92       	push	r10
     8fa:	bf 92       	push	r11
     8fc:	cf 92       	push	r12
     8fe:	df 92       	push	r13
     900:	ef 92       	push	r14
     902:	ff 92       	push	r15
     904:	0f 93       	push	r16
     906:	1f 93       	push	r17
     908:	cf 93       	push	r28
     90a:	df 93       	push	r29
	uint16_t retrieval_errors	= 0;
	uint16_t upper_retrieval_errors	= 0;
	uint16_t lower_retrieval_errors	= 0;
	uint16_t upper_write_errors	= 0;
	uint16_t lower_write_errors	= 0;
	printf("Starting SRAM test... %d bytes \n", ext_ram_size);
     90c:	88 e0       	ldi	r24, 0x08	; 8
     90e:	8f 93       	push	r24
     910:	1f 92       	push	r1
     912:	82 ee       	ldi	r24, 0xE2	; 226
     914:	93 e0       	ldi	r25, 0x03	; 3
     916:	9f 93       	push	r25
     918:	8f 93       	push	r24
     91a:	0e 94 2b 06 	call	0xc56	; 0xc56 <printf>
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this	function)
	uint16_t seed = rand();
     91e:	0e 94 d0 05 	call	0xba0	; 0xba0 <rand>
     922:	6c 01       	movw	r12, r24
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
     924:	0e 94 d5 05 	call	0xbaa	; 0xbaa <srand>
     928:	0f 90       	pop	r0
     92a:	0f 90       	pop	r0
     92c:	0f 90       	pop	r0
     92e:	0f 90       	pop	r0
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     930:	00 e0       	ldi	r16, 0x00	; 0
     932:	10 e0       	ldi	r17, 0x00	; 0
	uint16_t write_errors	= 0;
	uint16_t retrieval_errors	= 0;
	uint16_t upper_retrieval_errors	= 0;
	uint16_t lower_retrieval_errors	= 0;
	uint16_t upper_write_errors	= 0;
	uint16_t lower_write_errors	= 0;
     934:	e1 2c       	mov	r14, r1
     936:	f1 2c       	mov	r15, r1
	uint16_t ext_ram_size	= 0x800;
	uint16_t write_errors	= 0;
	uint16_t retrieval_errors	= 0;
	uint16_t upper_retrieval_errors	= 0;
	uint16_t lower_retrieval_errors	= 0;
	uint16_t upper_write_errors	= 0;
     938:	81 2c       	mov	r8, r1
     93a:	91 2c       	mov	r9, r1

uint16_t SRAM_test(void)
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size	= 0x800;
	uint16_t write_errors	= 0;
     93c:	c0 e0       	ldi	r28, 0x00	; 0
     93e:	d0 e0       	ldi	r29, 0x00	; 0
	// yield different seeds each time (unless srand() is called before this	function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     940:	0e 94 d0 05 	call	0xba0	; 0xba0 <rand>
     944:	f8 01       	movw	r30, r16
     946:	f8 5e       	subi	r31, 0xE8	; 232
		ext_ram[i] = some_value;
     948:	80 83       	st	Z, r24
		uint8_t retreived_value = ext_ram[i];
     94a:	90 81       	ld	r25, Z
		if (retreived_value != some_value) {
     94c:	98 17       	cp	r25, r24
     94e:	61 f0       	breq	.+24     	; 0x968 <SRAM_test+0x78>
			write_errors++;
     950:	21 96       	adiw	r28, 0x01	; 1
			if (i < ext_ram_size/2) {
     952:	01 15       	cp	r16, r1
     954:	84 e0       	ldi	r24, 0x04	; 4
     956:	18 07       	cpc	r17, r24
     958:	20 f4       	brcc	.+8      	; 0x962 <SRAM_test+0x72>
				lower_write_errors++;
     95a:	9f ef       	ldi	r25, 0xFF	; 255
     95c:	e9 1a       	sub	r14, r25
     95e:	f9 0a       	sbc	r15, r25
     960:	03 c0       	rjmp	.+6      	; 0x968 <SRAM_test+0x78>
			} else {
				upper_write_errors++;
     962:	8f ef       	ldi	r24, 0xFF	; 255
     964:	88 1a       	sub	r8, r24
     966:	98 0a       	sbc	r9, r24
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this	function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     968:	0f 5f       	subi	r16, 0xFF	; 255
     96a:	1f 4f       	sbci	r17, 0xFF	; 255
     96c:	01 15       	cp	r16, r1
     96e:	98 e0       	ldi	r25, 0x08	; 8
     970:	19 07       	cpc	r17, r25
     972:	31 f7       	brne	.-52     	; 0x940 <SRAM_test+0x50>
				upper_write_errors++;
			}
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write	phase
	srand(seed);
     974:	c6 01       	movw	r24, r12
     976:	0e 94 d5 05 	call	0xbaa	; 0xbaa <srand>
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     97a:	61 2c       	mov	r6, r1
     97c:	71 2c       	mov	r7, r1
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size	= 0x800;
	uint16_t write_errors	= 0;
	uint16_t retrieval_errors	= 0;
	uint16_t upper_retrieval_errors	= 0;
	uint16_t lower_retrieval_errors	= 0;
     97e:	a1 2c       	mov	r10, r1
     980:	b1 2c       	mov	r11, r1
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size	= 0x800;
	uint16_t write_errors	= 0;
	uint16_t retrieval_errors	= 0;
	uint16_t upper_retrieval_errors	= 0;
     982:	c1 2c       	mov	r12, r1
     984:	d1 2c       	mov	r13, r1
uint16_t SRAM_test(void)
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size	= 0x800;
	uint16_t write_errors	= 0;
	uint16_t retrieval_errors	= 0;
     986:	00 e0       	ldi	r16, 0x00	; 0
     988:	10 e0       	ldi	r17, 0x00	; 0
	}
	// Retrieval phase: Check that no values were changed during or after the write	phase
	srand(seed);
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     98a:	0e 94 d0 05 	call	0xba0	; 0xba0 <rand>
     98e:	f3 01       	movw	r30, r6
     990:	f8 5e       	subi	r31, 0xE8	; 232
		uint8_t retreived_value = ext_ram[i];
     992:	90 81       	ld	r25, Z
		if (retreived_value != some_value) {
     994:	98 17       	cp	r25, r24
     996:	69 f0       	breq	.+26     	; 0x9b2 <SRAM_test+0xc2>
			retrieval_errors++;
     998:	0f 5f       	subi	r16, 0xFF	; 255
     99a:	1f 4f       	sbci	r17, 0xFF	; 255
			if (i < ext_ram_size/2) {
     99c:	61 14       	cp	r6, r1
     99e:	84 e0       	ldi	r24, 0x04	; 4
     9a0:	78 06       	cpc	r7, r24
     9a2:	20 f4       	brcc	.+8      	; 0x9ac <SRAM_test+0xbc>
				lower_retrieval_errors++;
     9a4:	9f ef       	ldi	r25, 0xFF	; 255
     9a6:	a9 1a       	sub	r10, r25
     9a8:	b9 0a       	sbc	r11, r25
     9aa:	03 c0       	rjmp	.+6      	; 0x9b2 <SRAM_test+0xc2>
			} else {
				upper_retrieval_errors++;
     9ac:	8f ef       	ldi	r24, 0xFF	; 255
     9ae:	c8 1a       	sub	r12, r24
     9b0:	d8 0a       	sbc	r13, r24
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write	phase
	srand(seed);
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     9b2:	9f ef       	ldi	r25, 0xFF	; 255
     9b4:	69 1a       	sub	r6, r25
     9b6:	79 0a       	sbc	r7, r25
     9b8:	61 14       	cp	r6, r1
     9ba:	88 e0       	ldi	r24, 0x08	; 8
     9bc:	78 06       	cpc	r7, r24
     9be:	29 f7       	brne	.-54     	; 0x98a <SRAM_test+0x9a>
			} else {
				upper_retrieval_errors++;
			}
		}
	}
	printf("SRAM test completed with\n %d errors in write phase (%d upper, %d lower) and\n %d errors in retrieval phase (%d upper, %d lower)\n", write_errors, upper_write_errors, lower_write_errors, retrieval_errors, upper_retrieval_errors, lower_retrieval_errors);
     9c0:	bf 92       	push	r11
     9c2:	af 92       	push	r10
     9c4:	df 92       	push	r13
     9c6:	cf 92       	push	r12
     9c8:	1f 93       	push	r17
     9ca:	0f 93       	push	r16
     9cc:	ff 92       	push	r15
     9ce:	ef 92       	push	r14
     9d0:	9f 92       	push	r9
     9d2:	8f 92       	push	r8
     9d4:	df 93       	push	r29
     9d6:	cf 93       	push	r28
     9d8:	83 e0       	ldi	r24, 0x03	; 3
     9da:	94 e0       	ldi	r25, 0x04	; 4
     9dc:	9f 93       	push	r25
     9de:	8f 93       	push	r24
     9e0:	0e 94 2b 06 	call	0xc56	; 0xc56 <printf>
	return retrieval_errors+write_errors;
     9e4:	8d b7       	in	r24, 0x3d	; 61
     9e6:	9e b7       	in	r25, 0x3e	; 62
     9e8:	0e 96       	adiw	r24, 0x0e	; 14
     9ea:	0f b6       	in	r0, 0x3f	; 63
     9ec:	f8 94       	cli
     9ee:	9e bf       	out	0x3e, r25	; 62
     9f0:	0f be       	out	0x3f, r0	; 63
     9f2:	8d bf       	out	0x3d, r24	; 61
}
     9f4:	c8 01       	movw	r24, r16
     9f6:	8c 0f       	add	r24, r28
     9f8:	9d 1f       	adc	r25, r29
     9fa:	df 91       	pop	r29
     9fc:	cf 91       	pop	r28
     9fe:	1f 91       	pop	r17
     a00:	0f 91       	pop	r16
     a02:	ff 90       	pop	r15
     a04:	ef 90       	pop	r14
     a06:	df 90       	pop	r13
     a08:	cf 90       	pop	r12
     a0a:	bf 90       	pop	r11
     a0c:	af 90       	pop	r10
     a0e:	9f 90       	pop	r9
     a10:	8f 90       	pop	r8
     a12:	7f 90       	pop	r7
     a14:	6f 90       	pop	r6
     a16:	08 95       	ret

00000a18 <SRAM_allocate>:
size_t EXTMEM_size = 0x0400;
static void * EXTMEM_next = (void*)0x1800;


void * SRAM_allocate(size_t size){
	if (EXTMEM_next + size > EXTMEM_start + EXTMEM_size){
     a18:	20 91 10 01 	lds	r18, 0x0110
     a1c:	30 91 11 01 	lds	r19, 0x0111
     a20:	82 0f       	add	r24, r18
     a22:	93 1f       	adc	r25, r19
     a24:	60 91 14 01 	lds	r22, 0x0114
     a28:	70 91 15 01 	lds	r23, 0x0115
     a2c:	40 91 12 01 	lds	r20, 0x0112
     a30:	50 91 13 01 	lds	r21, 0x0113
     a34:	46 0f       	add	r20, r22
     a36:	57 1f       	adc	r21, r23
     a38:	48 17       	cp	r20, r24
     a3a:	59 07       	cpc	r21, r25
     a3c:	38 f0       	brcs	.+14     	; 0xa4c <SRAM_allocate+0x34>
		//printf("Out of memory\r\n");
		return NULL;
	}else{
		void * mem = EXTMEM_next;
		EXTMEM_next +=size;
     a3e:	90 93 11 01 	sts	0x0111, r25
     a42:	80 93 10 01 	sts	0x0110, r24
		return mem;
     a46:	82 2f       	mov	r24, r18
     a48:	93 2f       	mov	r25, r19
     a4a:	08 95       	ret


void * SRAM_allocate(size_t size){
	if (EXTMEM_next + size > EXTMEM_start + EXTMEM_size){
		//printf("Out of memory\r\n");
		return NULL;
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	90 e0       	ldi	r25, 0x00	; 0
	}else{
		void * mem = EXTMEM_next;
		EXTMEM_next +=size;
		return mem;
	}
     a50:	08 95       	ret

00000a52 <__divmodhi4>:
     a52:	97 fb       	bst	r25, 7
     a54:	07 2e       	mov	r0, r23
     a56:	16 f4       	brtc	.+4      	; 0xa5c <__divmodhi4+0xa>
     a58:	00 94       	com	r0
     a5a:	07 d0       	rcall	.+14     	; 0xa6a <__divmodhi4_neg1>
     a5c:	77 fd       	sbrc	r23, 7
     a5e:	09 d0       	rcall	.+18     	; 0xa72 <__divmodhi4_neg2>
     a60:	0e 94 6e 05 	call	0xadc	; 0xadc <__udivmodhi4>
     a64:	07 fc       	sbrc	r0, 7
     a66:	05 d0       	rcall	.+10     	; 0xa72 <__divmodhi4_neg2>
     a68:	3e f4       	brtc	.+14     	; 0xa78 <__divmodhi4_exit>

00000a6a <__divmodhi4_neg1>:
     a6a:	90 95       	com	r25
     a6c:	81 95       	neg	r24
     a6e:	9f 4f       	sbci	r25, 0xFF	; 255
     a70:	08 95       	ret

00000a72 <__divmodhi4_neg2>:
     a72:	70 95       	com	r23
     a74:	61 95       	neg	r22
     a76:	7f 4f       	sbci	r23, 0xFF	; 255

00000a78 <__divmodhi4_exit>:
     a78:	08 95       	ret

00000a7a <__udivmodsi4>:
     a7a:	a1 e2       	ldi	r26, 0x21	; 33
     a7c:	1a 2e       	mov	r1, r26
     a7e:	aa 1b       	sub	r26, r26
     a80:	bb 1b       	sub	r27, r27
     a82:	fd 01       	movw	r30, r26
     a84:	0d c0       	rjmp	.+26     	; 0xaa0 <__udivmodsi4_ep>

00000a86 <__udivmodsi4_loop>:
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	ee 1f       	adc	r30, r30
     a8c:	ff 1f       	adc	r31, r31
     a8e:	a2 17       	cp	r26, r18
     a90:	b3 07       	cpc	r27, r19
     a92:	e4 07       	cpc	r30, r20
     a94:	f5 07       	cpc	r31, r21
     a96:	20 f0       	brcs	.+8      	; 0xaa0 <__udivmodsi4_ep>
     a98:	a2 1b       	sub	r26, r18
     a9a:	b3 0b       	sbc	r27, r19
     a9c:	e4 0b       	sbc	r30, r20
     a9e:	f5 0b       	sbc	r31, r21

00000aa0 <__udivmodsi4_ep>:
     aa0:	66 1f       	adc	r22, r22
     aa2:	77 1f       	adc	r23, r23
     aa4:	88 1f       	adc	r24, r24
     aa6:	99 1f       	adc	r25, r25
     aa8:	1a 94       	dec	r1
     aaa:	69 f7       	brne	.-38     	; 0xa86 <__udivmodsi4_loop>
     aac:	60 95       	com	r22
     aae:	70 95       	com	r23
     ab0:	80 95       	com	r24
     ab2:	90 95       	com	r25
     ab4:	9b 01       	movw	r18, r22
     ab6:	ac 01       	movw	r20, r24
     ab8:	bd 01       	movw	r22, r26
     aba:	cf 01       	movw	r24, r30
     abc:	08 95       	ret

00000abe <__umulhisi3>:
     abe:	a2 9f       	mul	r26, r18
     ac0:	b0 01       	movw	r22, r0
     ac2:	b3 9f       	mul	r27, r19
     ac4:	c0 01       	movw	r24, r0
     ac6:	a3 9f       	mul	r26, r19
     ac8:	70 0d       	add	r23, r0
     aca:	81 1d       	adc	r24, r1
     acc:	11 24       	eor	r1, r1
     ace:	91 1d       	adc	r25, r1
     ad0:	b2 9f       	mul	r27, r18
     ad2:	70 0d       	add	r23, r0
     ad4:	81 1d       	adc	r24, r1
     ad6:	11 24       	eor	r1, r1
     ad8:	91 1d       	adc	r25, r1
     ada:	08 95       	ret

00000adc <__udivmodhi4>:
     adc:	aa 1b       	sub	r26, r26
     ade:	bb 1b       	sub	r27, r27
     ae0:	51 e1       	ldi	r21, 0x11	; 17
     ae2:	07 c0       	rjmp	.+14     	; 0xaf2 <__udivmodhi4_ep>

00000ae4 <__udivmodhi4_loop>:
     ae4:	aa 1f       	adc	r26, r26
     ae6:	bb 1f       	adc	r27, r27
     ae8:	a6 17       	cp	r26, r22
     aea:	b7 07       	cpc	r27, r23
     aec:	10 f0       	brcs	.+4      	; 0xaf2 <__udivmodhi4_ep>
     aee:	a6 1b       	sub	r26, r22
     af0:	b7 0b       	sbc	r27, r23

00000af2 <__udivmodhi4_ep>:
     af2:	88 1f       	adc	r24, r24
     af4:	99 1f       	adc	r25, r25
     af6:	5a 95       	dec	r21
     af8:	a9 f7       	brne	.-22     	; 0xae4 <__udivmodhi4_loop>
     afa:	80 95       	com	r24
     afc:	90 95       	com	r25
     afe:	bc 01       	movw	r22, r24
     b00:	cd 01       	movw	r24, r26
     b02:	08 95       	ret

00000b04 <do_rand>:
     b04:	8f 92       	push	r8
     b06:	9f 92       	push	r9
     b08:	af 92       	push	r10
     b0a:	bf 92       	push	r11
     b0c:	cf 92       	push	r12
     b0e:	df 92       	push	r13
     b10:	ef 92       	push	r14
     b12:	ff 92       	push	r15
     b14:	cf 93       	push	r28
     b16:	df 93       	push	r29
     b18:	ec 01       	movw	r28, r24
     b1a:	68 81       	ld	r22, Y
     b1c:	79 81       	ldd	r23, Y+1	; 0x01
     b1e:	8a 81       	ldd	r24, Y+2	; 0x02
     b20:	9b 81       	ldd	r25, Y+3	; 0x03
     b22:	61 15       	cp	r22, r1
     b24:	71 05       	cpc	r23, r1
     b26:	81 05       	cpc	r24, r1
     b28:	91 05       	cpc	r25, r1
     b2a:	21 f4       	brne	.+8      	; 0xb34 <do_rand+0x30>
     b2c:	64 e2       	ldi	r22, 0x24	; 36
     b2e:	79 ed       	ldi	r23, 0xD9	; 217
     b30:	8b e5       	ldi	r24, 0x5B	; 91
     b32:	97 e0       	ldi	r25, 0x07	; 7
     b34:	2d e1       	ldi	r18, 0x1D	; 29
     b36:	33 ef       	ldi	r19, 0xF3	; 243
     b38:	41 e0       	ldi	r20, 0x01	; 1
     b3a:	50 e0       	ldi	r21, 0x00	; 0
     b3c:	0e 94 35 0a 	call	0x146a	; 0x146a <__divmodsi4>
     b40:	49 01       	movw	r8, r18
     b42:	5a 01       	movw	r10, r20
     b44:	9b 01       	movw	r18, r22
     b46:	ac 01       	movw	r20, r24
     b48:	a7 ea       	ldi	r26, 0xA7	; 167
     b4a:	b1 e4       	ldi	r27, 0x41	; 65
     b4c:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <__muluhisi3>
     b50:	6b 01       	movw	r12, r22
     b52:	7c 01       	movw	r14, r24
     b54:	ac ee       	ldi	r26, 0xEC	; 236
     b56:	b4 ef       	ldi	r27, 0xF4	; 244
     b58:	a5 01       	movw	r20, r10
     b5a:	94 01       	movw	r18, r8
     b5c:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <__mulohisi3>
     b60:	c6 0e       	add	r12, r22
     b62:	d7 1e       	adc	r13, r23
     b64:	e8 1e       	adc	r14, r24
     b66:	f9 1e       	adc	r15, r25
     b68:	f7 fe       	sbrs	r15, 7
     b6a:	06 c0       	rjmp	.+12     	; 0xb78 <do_rand+0x74>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	c8 1a       	sub	r12, r24
     b70:	d1 08       	sbc	r13, r1
     b72:	e1 08       	sbc	r14, r1
     b74:	80 e8       	ldi	r24, 0x80	; 128
     b76:	f8 0a       	sbc	r15, r24
     b78:	c8 82       	st	Y, r12
     b7a:	d9 82       	std	Y+1, r13	; 0x01
     b7c:	ea 82       	std	Y+2, r14	; 0x02
     b7e:	fb 82       	std	Y+3, r15	; 0x03
     b80:	c6 01       	movw	r24, r12
     b82:	9f 77       	andi	r25, 0x7F	; 127
     b84:	df 91       	pop	r29
     b86:	cf 91       	pop	r28
     b88:	ff 90       	pop	r15
     b8a:	ef 90       	pop	r14
     b8c:	df 90       	pop	r13
     b8e:	cf 90       	pop	r12
     b90:	bf 90       	pop	r11
     b92:	af 90       	pop	r10
     b94:	9f 90       	pop	r9
     b96:	8f 90       	pop	r8
     b98:	08 95       	ret

00000b9a <rand_r>:
     b9a:	0e 94 82 05 	call	0xb04	; 0xb04 <do_rand>
     b9e:	08 95       	ret

00000ba0 <rand>:
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	91 e0       	ldi	r25, 0x01	; 1
     ba4:	0e 94 82 05 	call	0xb04	; 0xb04 <do_rand>
     ba8:	08 95       	ret

00000baa <srand>:
     baa:	a0 e0       	ldi	r26, 0x00	; 0
     bac:	b0 e0       	ldi	r27, 0x00	; 0
     bae:	80 93 00 01 	sts	0x0100, r24
     bb2:	90 93 01 01 	sts	0x0101, r25
     bb6:	a0 93 02 01 	sts	0x0102, r26
     bba:	b0 93 03 01 	sts	0x0103, r27
     bbe:	08 95       	ret

00000bc0 <fdevopen>:
     bc0:	0f 93       	push	r16
     bc2:	1f 93       	push	r17
     bc4:	cf 93       	push	r28
     bc6:	df 93       	push	r29
     bc8:	ec 01       	movw	r28, r24
     bca:	8b 01       	movw	r16, r22
     bcc:	00 97       	sbiw	r24, 0x00	; 0
     bce:	31 f4       	brne	.+12     	; 0xbdc <fdevopen+0x1c>
     bd0:	61 15       	cp	r22, r1
     bd2:	71 05       	cpc	r23, r1
     bd4:	19 f4       	brne	.+6      	; 0xbdc <fdevopen+0x1c>
     bd6:	80 e0       	ldi	r24, 0x00	; 0
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	38 c0       	rjmp	.+112    	; 0xc4c <fdevopen+0x8c>
     bdc:	6e e0       	ldi	r22, 0x0E	; 14
     bde:	70 e0       	ldi	r23, 0x00	; 0
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	0e 94 45 08 	call	0x108a	; 0x108a <calloc>
     be8:	fc 01       	movw	r30, r24
     bea:	00 97       	sbiw	r24, 0x00	; 0
     bec:	a1 f3       	breq	.-24     	; 0xbd6 <fdevopen+0x16>
     bee:	80 e8       	ldi	r24, 0x80	; 128
     bf0:	83 83       	std	Z+3, r24	; 0x03
     bf2:	01 15       	cp	r16, r1
     bf4:	11 05       	cpc	r17, r1
     bf6:	71 f0       	breq	.+28     	; 0xc14 <fdevopen+0x54>
     bf8:	13 87       	std	Z+11, r17	; 0x0b
     bfa:	02 87       	std	Z+10, r16	; 0x0a
     bfc:	81 e8       	ldi	r24, 0x81	; 129
     bfe:	83 83       	std	Z+3, r24	; 0x03
     c00:	80 91 8e 04 	lds	r24, 0x048E
     c04:	90 91 8f 04 	lds	r25, 0x048F
     c08:	89 2b       	or	r24, r25
     c0a:	21 f4       	brne	.+8      	; 0xc14 <fdevopen+0x54>
     c0c:	f0 93 8f 04 	sts	0x048F, r31
     c10:	e0 93 8e 04 	sts	0x048E, r30
     c14:	20 97       	sbiw	r28, 0x00	; 0
     c16:	c9 f0       	breq	.+50     	; 0xc4a <fdevopen+0x8a>
     c18:	d1 87       	std	Z+9, r29	; 0x09
     c1a:	c0 87       	std	Z+8, r28	; 0x08
     c1c:	83 81       	ldd	r24, Z+3	; 0x03
     c1e:	82 60       	ori	r24, 0x02	; 2
     c20:	83 83       	std	Z+3, r24	; 0x03
     c22:	80 91 90 04 	lds	r24, 0x0490
     c26:	90 91 91 04 	lds	r25, 0x0491
     c2a:	89 2b       	or	r24, r25
     c2c:	71 f4       	brne	.+28     	; 0xc4a <fdevopen+0x8a>
     c2e:	f0 93 91 04 	sts	0x0491, r31
     c32:	e0 93 90 04 	sts	0x0490, r30
     c36:	80 91 92 04 	lds	r24, 0x0492
     c3a:	90 91 93 04 	lds	r25, 0x0493
     c3e:	89 2b       	or	r24, r25
     c40:	21 f4       	brne	.+8      	; 0xc4a <fdevopen+0x8a>
     c42:	f0 93 93 04 	sts	0x0493, r31
     c46:	e0 93 92 04 	sts	0x0492, r30
     c4a:	cf 01       	movw	r24, r30
     c4c:	df 91       	pop	r29
     c4e:	cf 91       	pop	r28
     c50:	1f 91       	pop	r17
     c52:	0f 91       	pop	r16
     c54:	08 95       	ret

00000c56 <printf>:
     c56:	a0 e0       	ldi	r26, 0x00	; 0
     c58:	b0 e0       	ldi	r27, 0x00	; 0
     c5a:	e1 e3       	ldi	r30, 0x31	; 49
     c5c:	f6 e0       	ldi	r31, 0x06	; 6
     c5e:	0c 94 77 0a 	jmp	0x14ee	; 0x14ee <__prologue_saves__+0x20>
     c62:	fe 01       	movw	r30, r28
     c64:	35 96       	adiw	r30, 0x05	; 5
     c66:	61 91       	ld	r22, Z+
     c68:	71 91       	ld	r23, Z+
     c6a:	af 01       	movw	r20, r30
     c6c:	80 91 90 04 	lds	r24, 0x0490
     c70:	90 91 91 04 	lds	r25, 0x0491
     c74:	0e 94 73 06 	call	0xce6	; 0xce6 <vfprintf>
     c78:	e2 e0       	ldi	r30, 0x02	; 2
     c7a:	0c 94 93 0a 	jmp	0x1526	; 0x1526 <__epilogue_restores__+0x20>

00000c7e <putchar>:
     c7e:	60 91 90 04 	lds	r22, 0x0490
     c82:	70 91 91 04 	lds	r23, 0x0491
     c86:	0e 94 a5 09 	call	0x134a	; 0x134a <fputc>
     c8a:	08 95       	ret

00000c8c <puts>:
     c8c:	0f 93       	push	r16
     c8e:	1f 93       	push	r17
     c90:	cf 93       	push	r28
     c92:	df 93       	push	r29
     c94:	e0 91 90 04 	lds	r30, 0x0490
     c98:	f0 91 91 04 	lds	r31, 0x0491
     c9c:	23 81       	ldd	r18, Z+3	; 0x03
     c9e:	21 ff       	sbrs	r18, 1
     ca0:	1b c0       	rjmp	.+54     	; 0xcd8 <puts+0x4c>
     ca2:	ec 01       	movw	r28, r24
     ca4:	00 e0       	ldi	r16, 0x00	; 0
     ca6:	10 e0       	ldi	r17, 0x00	; 0
     ca8:	89 91       	ld	r24, Y+
     caa:	60 91 90 04 	lds	r22, 0x0490
     cae:	70 91 91 04 	lds	r23, 0x0491
     cb2:	db 01       	movw	r26, r22
     cb4:	18 96       	adiw	r26, 0x08	; 8
     cb6:	ed 91       	ld	r30, X+
     cb8:	fc 91       	ld	r31, X
     cba:	19 97       	sbiw	r26, 0x09	; 9
     cbc:	88 23       	and	r24, r24
     cbe:	31 f0       	breq	.+12     	; 0xccc <puts+0x40>
     cc0:	09 95       	icall
     cc2:	89 2b       	or	r24, r25
     cc4:	89 f3       	breq	.-30     	; 0xca8 <puts+0x1c>
     cc6:	0f ef       	ldi	r16, 0xFF	; 255
     cc8:	1f ef       	ldi	r17, 0xFF	; 255
     cca:	ee cf       	rjmp	.-36     	; 0xca8 <puts+0x1c>
     ccc:	8a e0       	ldi	r24, 0x0A	; 10
     cce:	09 95       	icall
     cd0:	89 2b       	or	r24, r25
     cd2:	11 f4       	brne	.+4      	; 0xcd8 <puts+0x4c>
     cd4:	c8 01       	movw	r24, r16
     cd6:	02 c0       	rjmp	.+4      	; 0xcdc <puts+0x50>
     cd8:	8f ef       	ldi	r24, 0xFF	; 255
     cda:	9f ef       	ldi	r25, 0xFF	; 255
     cdc:	df 91       	pop	r29
     cde:	cf 91       	pop	r28
     ce0:	1f 91       	pop	r17
     ce2:	0f 91       	pop	r16
     ce4:	08 95       	ret

00000ce6 <vfprintf>:
     ce6:	ac e0       	ldi	r26, 0x0C	; 12
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e9 e7       	ldi	r30, 0x79	; 121
     cec:	f6 e0       	ldi	r31, 0x06	; 6
     cee:	0c 94 67 0a 	jmp	0x14ce	; 0x14ce <__prologue_saves__>
     cf2:	7c 01       	movw	r14, r24
     cf4:	6b 01       	movw	r12, r22
     cf6:	8a 01       	movw	r16, r20
     cf8:	fc 01       	movw	r30, r24
     cfa:	17 82       	std	Z+7, r1	; 0x07
     cfc:	16 82       	std	Z+6, r1	; 0x06
     cfe:	83 81       	ldd	r24, Z+3	; 0x03
     d00:	81 ff       	sbrs	r24, 1
     d02:	bd c1       	rjmp	.+890    	; 0x107e <vfprintf+0x398>
     d04:	ce 01       	movw	r24, r28
     d06:	01 96       	adiw	r24, 0x01	; 1
     d08:	4c 01       	movw	r8, r24
     d0a:	f7 01       	movw	r30, r14
     d0c:	93 81       	ldd	r25, Z+3	; 0x03
     d0e:	f6 01       	movw	r30, r12
     d10:	93 fd       	sbrc	r25, 3
     d12:	85 91       	lpm	r24, Z+
     d14:	93 ff       	sbrs	r25, 3
     d16:	81 91       	ld	r24, Z+
     d18:	6f 01       	movw	r12, r30
     d1a:	88 23       	and	r24, r24
     d1c:	09 f4       	brne	.+2      	; 0xd20 <vfprintf+0x3a>
     d1e:	ab c1       	rjmp	.+854    	; 0x1076 <vfprintf+0x390>
     d20:	85 32       	cpi	r24, 0x25	; 37
     d22:	39 f4       	brne	.+14     	; 0xd32 <vfprintf+0x4c>
     d24:	93 fd       	sbrc	r25, 3
     d26:	85 91       	lpm	r24, Z+
     d28:	93 ff       	sbrs	r25, 3
     d2a:	81 91       	ld	r24, Z+
     d2c:	6f 01       	movw	r12, r30
     d2e:	85 32       	cpi	r24, 0x25	; 37
     d30:	29 f4       	brne	.+10     	; 0xd3c <vfprintf+0x56>
     d32:	b7 01       	movw	r22, r14
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	0e 94 a5 09 	call	0x134a	; 0x134a <fputc>
     d3a:	e7 cf       	rjmp	.-50     	; 0xd0a <vfprintf+0x24>
     d3c:	51 2c       	mov	r5, r1
     d3e:	31 2c       	mov	r3, r1
     d40:	20 e0       	ldi	r18, 0x00	; 0
     d42:	20 32       	cpi	r18, 0x20	; 32
     d44:	a0 f4       	brcc	.+40     	; 0xd6e <vfprintf+0x88>
     d46:	8b 32       	cpi	r24, 0x2B	; 43
     d48:	69 f0       	breq	.+26     	; 0xd64 <vfprintf+0x7e>
     d4a:	30 f4       	brcc	.+12     	; 0xd58 <vfprintf+0x72>
     d4c:	80 32       	cpi	r24, 0x20	; 32
     d4e:	59 f0       	breq	.+22     	; 0xd66 <vfprintf+0x80>
     d50:	83 32       	cpi	r24, 0x23	; 35
     d52:	69 f4       	brne	.+26     	; 0xd6e <vfprintf+0x88>
     d54:	20 61       	ori	r18, 0x10	; 16
     d56:	2c c0       	rjmp	.+88     	; 0xdb0 <vfprintf+0xca>
     d58:	8d 32       	cpi	r24, 0x2D	; 45
     d5a:	39 f0       	breq	.+14     	; 0xd6a <vfprintf+0x84>
     d5c:	80 33       	cpi	r24, 0x30	; 48
     d5e:	39 f4       	brne	.+14     	; 0xd6e <vfprintf+0x88>
     d60:	21 60       	ori	r18, 0x01	; 1
     d62:	26 c0       	rjmp	.+76     	; 0xdb0 <vfprintf+0xca>
     d64:	22 60       	ori	r18, 0x02	; 2
     d66:	24 60       	ori	r18, 0x04	; 4
     d68:	23 c0       	rjmp	.+70     	; 0xdb0 <vfprintf+0xca>
     d6a:	28 60       	ori	r18, 0x08	; 8
     d6c:	21 c0       	rjmp	.+66     	; 0xdb0 <vfprintf+0xca>
     d6e:	27 fd       	sbrc	r18, 7
     d70:	27 c0       	rjmp	.+78     	; 0xdc0 <vfprintf+0xda>
     d72:	30 ed       	ldi	r19, 0xD0	; 208
     d74:	38 0f       	add	r19, r24
     d76:	3a 30       	cpi	r19, 0x0A	; 10
     d78:	78 f4       	brcc	.+30     	; 0xd98 <vfprintf+0xb2>
     d7a:	26 ff       	sbrs	r18, 6
     d7c:	06 c0       	rjmp	.+12     	; 0xd8a <vfprintf+0xa4>
     d7e:	fa e0       	ldi	r31, 0x0A	; 10
     d80:	5f 9e       	mul	r5, r31
     d82:	30 0d       	add	r19, r0
     d84:	11 24       	eor	r1, r1
     d86:	53 2e       	mov	r5, r19
     d88:	13 c0       	rjmp	.+38     	; 0xdb0 <vfprintf+0xca>
     d8a:	8a e0       	ldi	r24, 0x0A	; 10
     d8c:	38 9e       	mul	r3, r24
     d8e:	30 0d       	add	r19, r0
     d90:	11 24       	eor	r1, r1
     d92:	33 2e       	mov	r3, r19
     d94:	20 62       	ori	r18, 0x20	; 32
     d96:	0c c0       	rjmp	.+24     	; 0xdb0 <vfprintf+0xca>
     d98:	8e 32       	cpi	r24, 0x2E	; 46
     d9a:	21 f4       	brne	.+8      	; 0xda4 <vfprintf+0xbe>
     d9c:	26 fd       	sbrc	r18, 6
     d9e:	6b c1       	rjmp	.+726    	; 0x1076 <vfprintf+0x390>
     da0:	20 64       	ori	r18, 0x40	; 64
     da2:	06 c0       	rjmp	.+12     	; 0xdb0 <vfprintf+0xca>
     da4:	8c 36       	cpi	r24, 0x6C	; 108
     da6:	11 f4       	brne	.+4      	; 0xdac <vfprintf+0xc6>
     da8:	20 68       	ori	r18, 0x80	; 128
     daa:	02 c0       	rjmp	.+4      	; 0xdb0 <vfprintf+0xca>
     dac:	88 36       	cpi	r24, 0x68	; 104
     dae:	41 f4       	brne	.+16     	; 0xdc0 <vfprintf+0xda>
     db0:	f6 01       	movw	r30, r12
     db2:	93 fd       	sbrc	r25, 3
     db4:	85 91       	lpm	r24, Z+
     db6:	93 ff       	sbrs	r25, 3
     db8:	81 91       	ld	r24, Z+
     dba:	6f 01       	movw	r12, r30
     dbc:	81 11       	cpse	r24, r1
     dbe:	c1 cf       	rjmp	.-126    	; 0xd42 <vfprintf+0x5c>
     dc0:	98 2f       	mov	r25, r24
     dc2:	9f 7d       	andi	r25, 0xDF	; 223
     dc4:	95 54       	subi	r25, 0x45	; 69
     dc6:	93 30       	cpi	r25, 0x03	; 3
     dc8:	28 f4       	brcc	.+10     	; 0xdd4 <vfprintf+0xee>
     dca:	0c 5f       	subi	r16, 0xFC	; 252
     dcc:	1f 4f       	sbci	r17, 0xFF	; 255
     dce:	ff e3       	ldi	r31, 0x3F	; 63
     dd0:	f9 83       	std	Y+1, r31	; 0x01
     dd2:	0d c0       	rjmp	.+26     	; 0xdee <vfprintf+0x108>
     dd4:	83 36       	cpi	r24, 0x63	; 99
     dd6:	31 f0       	breq	.+12     	; 0xde4 <vfprintf+0xfe>
     dd8:	83 37       	cpi	r24, 0x73	; 115
     dda:	71 f0       	breq	.+28     	; 0xdf8 <vfprintf+0x112>
     ddc:	83 35       	cpi	r24, 0x53	; 83
     dde:	09 f0       	breq	.+2      	; 0xde2 <vfprintf+0xfc>
     de0:	5b c0       	rjmp	.+182    	; 0xe98 <vfprintf+0x1b2>
     de2:	22 c0       	rjmp	.+68     	; 0xe28 <vfprintf+0x142>
     de4:	f8 01       	movw	r30, r16
     de6:	80 81       	ld	r24, Z
     de8:	89 83       	std	Y+1, r24	; 0x01
     dea:	0e 5f       	subi	r16, 0xFE	; 254
     dec:	1f 4f       	sbci	r17, 0xFF	; 255
     dee:	44 24       	eor	r4, r4
     df0:	43 94       	inc	r4
     df2:	51 2c       	mov	r5, r1
     df4:	54 01       	movw	r10, r8
     df6:	15 c0       	rjmp	.+42     	; 0xe22 <vfprintf+0x13c>
     df8:	38 01       	movw	r6, r16
     dfa:	f2 e0       	ldi	r31, 0x02	; 2
     dfc:	6f 0e       	add	r6, r31
     dfe:	71 1c       	adc	r7, r1
     e00:	f8 01       	movw	r30, r16
     e02:	a0 80       	ld	r10, Z
     e04:	b1 80       	ldd	r11, Z+1	; 0x01
     e06:	26 ff       	sbrs	r18, 6
     e08:	03 c0       	rjmp	.+6      	; 0xe10 <vfprintf+0x12a>
     e0a:	65 2d       	mov	r22, r5
     e0c:	70 e0       	ldi	r23, 0x00	; 0
     e0e:	02 c0       	rjmp	.+4      	; 0xe14 <vfprintf+0x12e>
     e10:	6f ef       	ldi	r22, 0xFF	; 255
     e12:	7f ef       	ldi	r23, 0xFF	; 255
     e14:	c5 01       	movw	r24, r10
     e16:	2c 87       	std	Y+12, r18	; 0x0c
     e18:	0e 94 9a 09 	call	0x1334	; 0x1334 <strnlen>
     e1c:	2c 01       	movw	r4, r24
     e1e:	83 01       	movw	r16, r6
     e20:	2c 85       	ldd	r18, Y+12	; 0x0c
     e22:	2f 77       	andi	r18, 0x7F	; 127
     e24:	22 2e       	mov	r2, r18
     e26:	17 c0       	rjmp	.+46     	; 0xe56 <vfprintf+0x170>
     e28:	38 01       	movw	r6, r16
     e2a:	f2 e0       	ldi	r31, 0x02	; 2
     e2c:	6f 0e       	add	r6, r31
     e2e:	71 1c       	adc	r7, r1
     e30:	f8 01       	movw	r30, r16
     e32:	a0 80       	ld	r10, Z
     e34:	b1 80       	ldd	r11, Z+1	; 0x01
     e36:	26 ff       	sbrs	r18, 6
     e38:	03 c0       	rjmp	.+6      	; 0xe40 <vfprintf+0x15a>
     e3a:	65 2d       	mov	r22, r5
     e3c:	70 e0       	ldi	r23, 0x00	; 0
     e3e:	02 c0       	rjmp	.+4      	; 0xe44 <vfprintf+0x15e>
     e40:	6f ef       	ldi	r22, 0xFF	; 255
     e42:	7f ef       	ldi	r23, 0xFF	; 255
     e44:	c5 01       	movw	r24, r10
     e46:	2c 87       	std	Y+12, r18	; 0x0c
     e48:	0e 94 88 09 	call	0x1310	; 0x1310 <strnlen_P>
     e4c:	2c 01       	movw	r4, r24
     e4e:	2c 85       	ldd	r18, Y+12	; 0x0c
     e50:	20 68       	ori	r18, 0x80	; 128
     e52:	22 2e       	mov	r2, r18
     e54:	83 01       	movw	r16, r6
     e56:	23 fc       	sbrc	r2, 3
     e58:	1b c0       	rjmp	.+54     	; 0xe90 <vfprintf+0x1aa>
     e5a:	83 2d       	mov	r24, r3
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	48 16       	cp	r4, r24
     e60:	59 06       	cpc	r5, r25
     e62:	b0 f4       	brcc	.+44     	; 0xe90 <vfprintf+0x1aa>
     e64:	b7 01       	movw	r22, r14
     e66:	80 e2       	ldi	r24, 0x20	; 32
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	0e 94 a5 09 	call	0x134a	; 0x134a <fputc>
     e6e:	3a 94       	dec	r3
     e70:	f4 cf       	rjmp	.-24     	; 0xe5a <vfprintf+0x174>
     e72:	f5 01       	movw	r30, r10
     e74:	27 fc       	sbrc	r2, 7
     e76:	85 91       	lpm	r24, Z+
     e78:	27 fe       	sbrs	r2, 7
     e7a:	81 91       	ld	r24, Z+
     e7c:	5f 01       	movw	r10, r30
     e7e:	b7 01       	movw	r22, r14
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	0e 94 a5 09 	call	0x134a	; 0x134a <fputc>
     e86:	31 10       	cpse	r3, r1
     e88:	3a 94       	dec	r3
     e8a:	f1 e0       	ldi	r31, 0x01	; 1
     e8c:	4f 1a       	sub	r4, r31
     e8e:	51 08       	sbc	r5, r1
     e90:	41 14       	cp	r4, r1
     e92:	51 04       	cpc	r5, r1
     e94:	71 f7       	brne	.-36     	; 0xe72 <vfprintf+0x18c>
     e96:	e5 c0       	rjmp	.+458    	; 0x1062 <vfprintf+0x37c>
     e98:	84 36       	cpi	r24, 0x64	; 100
     e9a:	11 f0       	breq	.+4      	; 0xea0 <vfprintf+0x1ba>
     e9c:	89 36       	cpi	r24, 0x69	; 105
     e9e:	39 f5       	brne	.+78     	; 0xeee <vfprintf+0x208>
     ea0:	f8 01       	movw	r30, r16
     ea2:	27 ff       	sbrs	r18, 7
     ea4:	07 c0       	rjmp	.+14     	; 0xeb4 <vfprintf+0x1ce>
     ea6:	60 81       	ld	r22, Z
     ea8:	71 81       	ldd	r23, Z+1	; 0x01
     eaa:	82 81       	ldd	r24, Z+2	; 0x02
     eac:	93 81       	ldd	r25, Z+3	; 0x03
     eae:	0c 5f       	subi	r16, 0xFC	; 252
     eb0:	1f 4f       	sbci	r17, 0xFF	; 255
     eb2:	08 c0       	rjmp	.+16     	; 0xec4 <vfprintf+0x1de>
     eb4:	60 81       	ld	r22, Z
     eb6:	71 81       	ldd	r23, Z+1	; 0x01
     eb8:	88 27       	eor	r24, r24
     eba:	77 fd       	sbrc	r23, 7
     ebc:	80 95       	com	r24
     ebe:	98 2f       	mov	r25, r24
     ec0:	0e 5f       	subi	r16, 0xFE	; 254
     ec2:	1f 4f       	sbci	r17, 0xFF	; 255
     ec4:	2f 76       	andi	r18, 0x6F	; 111
     ec6:	b2 2e       	mov	r11, r18
     ec8:	97 ff       	sbrs	r25, 7
     eca:	09 c0       	rjmp	.+18     	; 0xede <vfprintf+0x1f8>
     ecc:	90 95       	com	r25
     ece:	80 95       	com	r24
     ed0:	70 95       	com	r23
     ed2:	61 95       	neg	r22
     ed4:	7f 4f       	sbci	r23, 0xFF	; 255
     ed6:	8f 4f       	sbci	r24, 0xFF	; 255
     ed8:	9f 4f       	sbci	r25, 0xFF	; 255
     eda:	20 68       	ori	r18, 0x80	; 128
     edc:	b2 2e       	mov	r11, r18
     ede:	2a e0       	ldi	r18, 0x0A	; 10
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	a4 01       	movw	r20, r8
     ee4:	0e 94 d7 09 	call	0x13ae	; 0x13ae <__ultoa_invert>
     ee8:	a8 2e       	mov	r10, r24
     eea:	a8 18       	sub	r10, r8
     eec:	44 c0       	rjmp	.+136    	; 0xf76 <vfprintf+0x290>
     eee:	85 37       	cpi	r24, 0x75	; 117
     ef0:	29 f4       	brne	.+10     	; 0xefc <vfprintf+0x216>
     ef2:	2f 7e       	andi	r18, 0xEF	; 239
     ef4:	b2 2e       	mov	r11, r18
     ef6:	2a e0       	ldi	r18, 0x0A	; 10
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	25 c0       	rjmp	.+74     	; 0xf46 <vfprintf+0x260>
     efc:	f2 2f       	mov	r31, r18
     efe:	f9 7f       	andi	r31, 0xF9	; 249
     f00:	bf 2e       	mov	r11, r31
     f02:	8f 36       	cpi	r24, 0x6F	; 111
     f04:	c1 f0       	breq	.+48     	; 0xf36 <vfprintf+0x250>
     f06:	18 f4       	brcc	.+6      	; 0xf0e <vfprintf+0x228>
     f08:	88 35       	cpi	r24, 0x58	; 88
     f0a:	79 f0       	breq	.+30     	; 0xf2a <vfprintf+0x244>
     f0c:	b4 c0       	rjmp	.+360    	; 0x1076 <vfprintf+0x390>
     f0e:	80 37       	cpi	r24, 0x70	; 112
     f10:	19 f0       	breq	.+6      	; 0xf18 <vfprintf+0x232>
     f12:	88 37       	cpi	r24, 0x78	; 120
     f14:	21 f0       	breq	.+8      	; 0xf1e <vfprintf+0x238>
     f16:	af c0       	rjmp	.+350    	; 0x1076 <vfprintf+0x390>
     f18:	2f 2f       	mov	r18, r31
     f1a:	20 61       	ori	r18, 0x10	; 16
     f1c:	b2 2e       	mov	r11, r18
     f1e:	b4 fe       	sbrs	r11, 4
     f20:	0d c0       	rjmp	.+26     	; 0xf3c <vfprintf+0x256>
     f22:	8b 2d       	mov	r24, r11
     f24:	84 60       	ori	r24, 0x04	; 4
     f26:	b8 2e       	mov	r11, r24
     f28:	09 c0       	rjmp	.+18     	; 0xf3c <vfprintf+0x256>
     f2a:	24 ff       	sbrs	r18, 4
     f2c:	0a c0       	rjmp	.+20     	; 0xf42 <vfprintf+0x25c>
     f2e:	9f 2f       	mov	r25, r31
     f30:	96 60       	ori	r25, 0x06	; 6
     f32:	b9 2e       	mov	r11, r25
     f34:	06 c0       	rjmp	.+12     	; 0xf42 <vfprintf+0x25c>
     f36:	28 e0       	ldi	r18, 0x08	; 8
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	05 c0       	rjmp	.+10     	; 0xf46 <vfprintf+0x260>
     f3c:	20 e1       	ldi	r18, 0x10	; 16
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	02 c0       	rjmp	.+4      	; 0xf46 <vfprintf+0x260>
     f42:	20 e1       	ldi	r18, 0x10	; 16
     f44:	32 e0       	ldi	r19, 0x02	; 2
     f46:	f8 01       	movw	r30, r16
     f48:	b7 fe       	sbrs	r11, 7
     f4a:	07 c0       	rjmp	.+14     	; 0xf5a <vfprintf+0x274>
     f4c:	60 81       	ld	r22, Z
     f4e:	71 81       	ldd	r23, Z+1	; 0x01
     f50:	82 81       	ldd	r24, Z+2	; 0x02
     f52:	93 81       	ldd	r25, Z+3	; 0x03
     f54:	0c 5f       	subi	r16, 0xFC	; 252
     f56:	1f 4f       	sbci	r17, 0xFF	; 255
     f58:	06 c0       	rjmp	.+12     	; 0xf66 <vfprintf+0x280>
     f5a:	60 81       	ld	r22, Z
     f5c:	71 81       	ldd	r23, Z+1	; 0x01
     f5e:	80 e0       	ldi	r24, 0x00	; 0
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	0e 5f       	subi	r16, 0xFE	; 254
     f64:	1f 4f       	sbci	r17, 0xFF	; 255
     f66:	a4 01       	movw	r20, r8
     f68:	0e 94 d7 09 	call	0x13ae	; 0x13ae <__ultoa_invert>
     f6c:	a8 2e       	mov	r10, r24
     f6e:	a8 18       	sub	r10, r8
     f70:	fb 2d       	mov	r31, r11
     f72:	ff 77       	andi	r31, 0x7F	; 127
     f74:	bf 2e       	mov	r11, r31
     f76:	b6 fe       	sbrs	r11, 6
     f78:	0b c0       	rjmp	.+22     	; 0xf90 <vfprintf+0x2aa>
     f7a:	2b 2d       	mov	r18, r11
     f7c:	2e 7f       	andi	r18, 0xFE	; 254
     f7e:	a5 14       	cp	r10, r5
     f80:	50 f4       	brcc	.+20     	; 0xf96 <vfprintf+0x2b0>
     f82:	b4 fe       	sbrs	r11, 4
     f84:	0a c0       	rjmp	.+20     	; 0xf9a <vfprintf+0x2b4>
     f86:	b2 fc       	sbrc	r11, 2
     f88:	08 c0       	rjmp	.+16     	; 0xf9a <vfprintf+0x2b4>
     f8a:	2b 2d       	mov	r18, r11
     f8c:	2e 7e       	andi	r18, 0xEE	; 238
     f8e:	05 c0       	rjmp	.+10     	; 0xf9a <vfprintf+0x2b4>
     f90:	7a 2c       	mov	r7, r10
     f92:	2b 2d       	mov	r18, r11
     f94:	03 c0       	rjmp	.+6      	; 0xf9c <vfprintf+0x2b6>
     f96:	7a 2c       	mov	r7, r10
     f98:	01 c0       	rjmp	.+2      	; 0xf9c <vfprintf+0x2b6>
     f9a:	75 2c       	mov	r7, r5
     f9c:	24 ff       	sbrs	r18, 4
     f9e:	0d c0       	rjmp	.+26     	; 0xfba <vfprintf+0x2d4>
     fa0:	fe 01       	movw	r30, r28
     fa2:	ea 0d       	add	r30, r10
     fa4:	f1 1d       	adc	r31, r1
     fa6:	80 81       	ld	r24, Z
     fa8:	80 33       	cpi	r24, 0x30	; 48
     faa:	11 f4       	brne	.+4      	; 0xfb0 <vfprintf+0x2ca>
     fac:	29 7e       	andi	r18, 0xE9	; 233
     fae:	09 c0       	rjmp	.+18     	; 0xfc2 <vfprintf+0x2dc>
     fb0:	22 ff       	sbrs	r18, 2
     fb2:	06 c0       	rjmp	.+12     	; 0xfc0 <vfprintf+0x2da>
     fb4:	73 94       	inc	r7
     fb6:	73 94       	inc	r7
     fb8:	04 c0       	rjmp	.+8      	; 0xfc2 <vfprintf+0x2dc>
     fba:	82 2f       	mov	r24, r18
     fbc:	86 78       	andi	r24, 0x86	; 134
     fbe:	09 f0       	breq	.+2      	; 0xfc2 <vfprintf+0x2dc>
     fc0:	73 94       	inc	r7
     fc2:	23 fd       	sbrc	r18, 3
     fc4:	13 c0       	rjmp	.+38     	; 0xfec <vfprintf+0x306>
     fc6:	20 ff       	sbrs	r18, 0
     fc8:	06 c0       	rjmp	.+12     	; 0xfd6 <vfprintf+0x2f0>
     fca:	5a 2c       	mov	r5, r10
     fcc:	73 14       	cp	r7, r3
     fce:	18 f4       	brcc	.+6      	; 0xfd6 <vfprintf+0x2f0>
     fd0:	53 0c       	add	r5, r3
     fd2:	57 18       	sub	r5, r7
     fd4:	73 2c       	mov	r7, r3
     fd6:	73 14       	cp	r7, r3
     fd8:	68 f4       	brcc	.+26     	; 0xff4 <vfprintf+0x30e>
     fda:	b7 01       	movw	r22, r14
     fdc:	80 e2       	ldi	r24, 0x20	; 32
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	2c 87       	std	Y+12, r18	; 0x0c
     fe2:	0e 94 a5 09 	call	0x134a	; 0x134a <fputc>
     fe6:	73 94       	inc	r7
     fe8:	2c 85       	ldd	r18, Y+12	; 0x0c
     fea:	f5 cf       	rjmp	.-22     	; 0xfd6 <vfprintf+0x2f0>
     fec:	73 14       	cp	r7, r3
     fee:	10 f4       	brcc	.+4      	; 0xff4 <vfprintf+0x30e>
     ff0:	37 18       	sub	r3, r7
     ff2:	01 c0       	rjmp	.+2      	; 0xff6 <vfprintf+0x310>
     ff4:	31 2c       	mov	r3, r1
     ff6:	24 ff       	sbrs	r18, 4
     ff8:	12 c0       	rjmp	.+36     	; 0x101e <vfprintf+0x338>
     ffa:	b7 01       	movw	r22, r14
     ffc:	80 e3       	ldi	r24, 0x30	; 48
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	2c 87       	std	Y+12, r18	; 0x0c
    1002:	0e 94 a5 09 	call	0x134a	; 0x134a <fputc>
    1006:	2c 85       	ldd	r18, Y+12	; 0x0c
    1008:	22 ff       	sbrs	r18, 2
    100a:	17 c0       	rjmp	.+46     	; 0x103a <vfprintf+0x354>
    100c:	21 ff       	sbrs	r18, 1
    100e:	03 c0       	rjmp	.+6      	; 0x1016 <vfprintf+0x330>
    1010:	88 e5       	ldi	r24, 0x58	; 88
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	02 c0       	rjmp	.+4      	; 0x101a <vfprintf+0x334>
    1016:	88 e7       	ldi	r24, 0x78	; 120
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	b7 01       	movw	r22, r14
    101c:	0c c0       	rjmp	.+24     	; 0x1036 <vfprintf+0x350>
    101e:	82 2f       	mov	r24, r18
    1020:	86 78       	andi	r24, 0x86	; 134
    1022:	59 f0       	breq	.+22     	; 0x103a <vfprintf+0x354>
    1024:	21 fd       	sbrc	r18, 1
    1026:	02 c0       	rjmp	.+4      	; 0x102c <vfprintf+0x346>
    1028:	80 e2       	ldi	r24, 0x20	; 32
    102a:	01 c0       	rjmp	.+2      	; 0x102e <vfprintf+0x348>
    102c:	8b e2       	ldi	r24, 0x2B	; 43
    102e:	27 fd       	sbrc	r18, 7
    1030:	8d e2       	ldi	r24, 0x2D	; 45
    1032:	b7 01       	movw	r22, r14
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	0e 94 a5 09 	call	0x134a	; 0x134a <fputc>
    103a:	a5 14       	cp	r10, r5
    103c:	38 f4       	brcc	.+14     	; 0x104c <vfprintf+0x366>
    103e:	b7 01       	movw	r22, r14
    1040:	80 e3       	ldi	r24, 0x30	; 48
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	0e 94 a5 09 	call	0x134a	; 0x134a <fputc>
    1048:	5a 94       	dec	r5
    104a:	f7 cf       	rjmp	.-18     	; 0x103a <vfprintf+0x354>
    104c:	aa 94       	dec	r10
    104e:	f4 01       	movw	r30, r8
    1050:	ea 0d       	add	r30, r10
    1052:	f1 1d       	adc	r31, r1
    1054:	80 81       	ld	r24, Z
    1056:	b7 01       	movw	r22, r14
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	0e 94 a5 09 	call	0x134a	; 0x134a <fputc>
    105e:	a1 10       	cpse	r10, r1
    1060:	f5 cf       	rjmp	.-22     	; 0x104c <vfprintf+0x366>
    1062:	33 20       	and	r3, r3
    1064:	09 f4       	brne	.+2      	; 0x1068 <vfprintf+0x382>
    1066:	51 ce       	rjmp	.-862    	; 0xd0a <vfprintf+0x24>
    1068:	b7 01       	movw	r22, r14
    106a:	80 e2       	ldi	r24, 0x20	; 32
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	0e 94 a5 09 	call	0x134a	; 0x134a <fputc>
    1072:	3a 94       	dec	r3
    1074:	f6 cf       	rjmp	.-20     	; 0x1062 <vfprintf+0x37c>
    1076:	f7 01       	movw	r30, r14
    1078:	86 81       	ldd	r24, Z+6	; 0x06
    107a:	97 81       	ldd	r25, Z+7	; 0x07
    107c:	02 c0       	rjmp	.+4      	; 0x1082 <vfprintf+0x39c>
    107e:	8f ef       	ldi	r24, 0xFF	; 255
    1080:	9f ef       	ldi	r25, 0xFF	; 255
    1082:	2c 96       	adiw	r28, 0x0c	; 12
    1084:	e2 e1       	ldi	r30, 0x12	; 18
    1086:	0c 94 83 0a 	jmp	0x1506	; 0x1506 <__epilogue_restores__>

0000108a <calloc>:
    108a:	0f 93       	push	r16
    108c:	1f 93       	push	r17
    108e:	cf 93       	push	r28
    1090:	df 93       	push	r29
    1092:	86 9f       	mul	r24, r22
    1094:	80 01       	movw	r16, r0
    1096:	87 9f       	mul	r24, r23
    1098:	10 0d       	add	r17, r0
    109a:	96 9f       	mul	r25, r22
    109c:	10 0d       	add	r17, r0
    109e:	11 24       	eor	r1, r1
    10a0:	c8 01       	movw	r24, r16
    10a2:	0e 94 61 08 	call	0x10c2	; 0x10c2 <malloc>
    10a6:	ec 01       	movw	r28, r24
    10a8:	00 97       	sbiw	r24, 0x00	; 0
    10aa:	29 f0       	breq	.+10     	; 0x10b6 <calloc+0x2c>
    10ac:	a8 01       	movw	r20, r16
    10ae:	60 e0       	ldi	r22, 0x00	; 0
    10b0:	70 e0       	ldi	r23, 0x00	; 0
    10b2:	0e 94 93 09 	call	0x1326	; 0x1326 <memset>
    10b6:	ce 01       	movw	r24, r28
    10b8:	df 91       	pop	r29
    10ba:	cf 91       	pop	r28
    10bc:	1f 91       	pop	r17
    10be:	0f 91       	pop	r16
    10c0:	08 95       	ret

000010c2 <malloc>:
    10c2:	cf 93       	push	r28
    10c4:	df 93       	push	r29
    10c6:	82 30       	cpi	r24, 0x02	; 2
    10c8:	91 05       	cpc	r25, r1
    10ca:	10 f4       	brcc	.+4      	; 0x10d0 <malloc+0xe>
    10cc:	82 e0       	ldi	r24, 0x02	; 2
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	e0 91 96 04 	lds	r30, 0x0496
    10d4:	f0 91 97 04 	lds	r31, 0x0497
    10d8:	20 e0       	ldi	r18, 0x00	; 0
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	a0 e0       	ldi	r26, 0x00	; 0
    10de:	b0 e0       	ldi	r27, 0x00	; 0
    10e0:	30 97       	sbiw	r30, 0x00	; 0
    10e2:	39 f1       	breq	.+78     	; 0x1132 <malloc+0x70>
    10e4:	40 81       	ld	r20, Z
    10e6:	51 81       	ldd	r21, Z+1	; 0x01
    10e8:	48 17       	cp	r20, r24
    10ea:	59 07       	cpc	r21, r25
    10ec:	b8 f0       	brcs	.+46     	; 0x111c <malloc+0x5a>
    10ee:	48 17       	cp	r20, r24
    10f0:	59 07       	cpc	r21, r25
    10f2:	71 f4       	brne	.+28     	; 0x1110 <malloc+0x4e>
    10f4:	82 81       	ldd	r24, Z+2	; 0x02
    10f6:	93 81       	ldd	r25, Z+3	; 0x03
    10f8:	10 97       	sbiw	r26, 0x00	; 0
    10fa:	29 f0       	breq	.+10     	; 0x1106 <malloc+0x44>
    10fc:	13 96       	adiw	r26, 0x03	; 3
    10fe:	9c 93       	st	X, r25
    1100:	8e 93       	st	-X, r24
    1102:	12 97       	sbiw	r26, 0x02	; 2
    1104:	2c c0       	rjmp	.+88     	; 0x115e <malloc+0x9c>
    1106:	90 93 97 04 	sts	0x0497, r25
    110a:	80 93 96 04 	sts	0x0496, r24
    110e:	27 c0       	rjmp	.+78     	; 0x115e <malloc+0x9c>
    1110:	21 15       	cp	r18, r1
    1112:	31 05       	cpc	r19, r1
    1114:	31 f0       	breq	.+12     	; 0x1122 <malloc+0x60>
    1116:	42 17       	cp	r20, r18
    1118:	53 07       	cpc	r21, r19
    111a:	18 f0       	brcs	.+6      	; 0x1122 <malloc+0x60>
    111c:	a9 01       	movw	r20, r18
    111e:	db 01       	movw	r26, r22
    1120:	01 c0       	rjmp	.+2      	; 0x1124 <malloc+0x62>
    1122:	ef 01       	movw	r28, r30
    1124:	9a 01       	movw	r18, r20
    1126:	bd 01       	movw	r22, r26
    1128:	df 01       	movw	r26, r30
    112a:	02 80       	ldd	r0, Z+2	; 0x02
    112c:	f3 81       	ldd	r31, Z+3	; 0x03
    112e:	e0 2d       	mov	r30, r0
    1130:	d7 cf       	rjmp	.-82     	; 0x10e0 <malloc+0x1e>
    1132:	21 15       	cp	r18, r1
    1134:	31 05       	cpc	r19, r1
    1136:	f9 f0       	breq	.+62     	; 0x1176 <malloc+0xb4>
    1138:	28 1b       	sub	r18, r24
    113a:	39 0b       	sbc	r19, r25
    113c:	24 30       	cpi	r18, 0x04	; 4
    113e:	31 05       	cpc	r19, r1
    1140:	80 f4       	brcc	.+32     	; 0x1162 <malloc+0xa0>
    1142:	8a 81       	ldd	r24, Y+2	; 0x02
    1144:	9b 81       	ldd	r25, Y+3	; 0x03
    1146:	61 15       	cp	r22, r1
    1148:	71 05       	cpc	r23, r1
    114a:	21 f0       	breq	.+8      	; 0x1154 <malloc+0x92>
    114c:	fb 01       	movw	r30, r22
    114e:	93 83       	std	Z+3, r25	; 0x03
    1150:	82 83       	std	Z+2, r24	; 0x02
    1152:	04 c0       	rjmp	.+8      	; 0x115c <malloc+0x9a>
    1154:	90 93 97 04 	sts	0x0497, r25
    1158:	80 93 96 04 	sts	0x0496, r24
    115c:	fe 01       	movw	r30, r28
    115e:	32 96       	adiw	r30, 0x02	; 2
    1160:	44 c0       	rjmp	.+136    	; 0x11ea <malloc+0x128>
    1162:	fe 01       	movw	r30, r28
    1164:	e2 0f       	add	r30, r18
    1166:	f3 1f       	adc	r31, r19
    1168:	81 93       	st	Z+, r24
    116a:	91 93       	st	Z+, r25
    116c:	22 50       	subi	r18, 0x02	; 2
    116e:	31 09       	sbc	r19, r1
    1170:	39 83       	std	Y+1, r19	; 0x01
    1172:	28 83       	st	Y, r18
    1174:	3a c0       	rjmp	.+116    	; 0x11ea <malloc+0x128>
    1176:	20 91 94 04 	lds	r18, 0x0494
    117a:	30 91 95 04 	lds	r19, 0x0495
    117e:	23 2b       	or	r18, r19
    1180:	41 f4       	brne	.+16     	; 0x1192 <malloc+0xd0>
    1182:	20 91 06 01 	lds	r18, 0x0106
    1186:	30 91 07 01 	lds	r19, 0x0107
    118a:	30 93 95 04 	sts	0x0495, r19
    118e:	20 93 94 04 	sts	0x0494, r18
    1192:	20 91 04 01 	lds	r18, 0x0104
    1196:	30 91 05 01 	lds	r19, 0x0105
    119a:	21 15       	cp	r18, r1
    119c:	31 05       	cpc	r19, r1
    119e:	41 f4       	brne	.+16     	; 0x11b0 <malloc+0xee>
    11a0:	2d b7       	in	r18, 0x3d	; 61
    11a2:	3e b7       	in	r19, 0x3e	; 62
    11a4:	40 91 08 01 	lds	r20, 0x0108
    11a8:	50 91 09 01 	lds	r21, 0x0109
    11ac:	24 1b       	sub	r18, r20
    11ae:	35 0b       	sbc	r19, r21
    11b0:	e0 91 94 04 	lds	r30, 0x0494
    11b4:	f0 91 95 04 	lds	r31, 0x0495
    11b8:	e2 17       	cp	r30, r18
    11ba:	f3 07       	cpc	r31, r19
    11bc:	a0 f4       	brcc	.+40     	; 0x11e6 <malloc+0x124>
    11be:	2e 1b       	sub	r18, r30
    11c0:	3f 0b       	sbc	r19, r31
    11c2:	28 17       	cp	r18, r24
    11c4:	39 07       	cpc	r19, r25
    11c6:	78 f0       	brcs	.+30     	; 0x11e6 <malloc+0x124>
    11c8:	ac 01       	movw	r20, r24
    11ca:	4e 5f       	subi	r20, 0xFE	; 254
    11cc:	5f 4f       	sbci	r21, 0xFF	; 255
    11ce:	24 17       	cp	r18, r20
    11d0:	35 07       	cpc	r19, r21
    11d2:	48 f0       	brcs	.+18     	; 0x11e6 <malloc+0x124>
    11d4:	4e 0f       	add	r20, r30
    11d6:	5f 1f       	adc	r21, r31
    11d8:	50 93 95 04 	sts	0x0495, r21
    11dc:	40 93 94 04 	sts	0x0494, r20
    11e0:	81 93       	st	Z+, r24
    11e2:	91 93       	st	Z+, r25
    11e4:	02 c0       	rjmp	.+4      	; 0x11ea <malloc+0x128>
    11e6:	e0 e0       	ldi	r30, 0x00	; 0
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	cf 01       	movw	r24, r30
    11ec:	df 91       	pop	r29
    11ee:	cf 91       	pop	r28
    11f0:	08 95       	ret

000011f2 <free>:
    11f2:	cf 93       	push	r28
    11f4:	df 93       	push	r29
    11f6:	00 97       	sbiw	r24, 0x00	; 0
    11f8:	09 f4       	brne	.+2      	; 0x11fc <free+0xa>
    11fa:	87 c0       	rjmp	.+270    	; 0x130a <free+0x118>
    11fc:	fc 01       	movw	r30, r24
    11fe:	32 97       	sbiw	r30, 0x02	; 2
    1200:	13 82       	std	Z+3, r1	; 0x03
    1202:	12 82       	std	Z+2, r1	; 0x02
    1204:	c0 91 96 04 	lds	r28, 0x0496
    1208:	d0 91 97 04 	lds	r29, 0x0497
    120c:	20 97       	sbiw	r28, 0x00	; 0
    120e:	81 f4       	brne	.+32     	; 0x1230 <free+0x3e>
    1210:	20 81       	ld	r18, Z
    1212:	31 81       	ldd	r19, Z+1	; 0x01
    1214:	28 0f       	add	r18, r24
    1216:	39 1f       	adc	r19, r25
    1218:	80 91 94 04 	lds	r24, 0x0494
    121c:	90 91 95 04 	lds	r25, 0x0495
    1220:	82 17       	cp	r24, r18
    1222:	93 07       	cpc	r25, r19
    1224:	79 f5       	brne	.+94     	; 0x1284 <free+0x92>
    1226:	f0 93 95 04 	sts	0x0495, r31
    122a:	e0 93 94 04 	sts	0x0494, r30
    122e:	6d c0       	rjmp	.+218    	; 0x130a <free+0x118>
    1230:	de 01       	movw	r26, r28
    1232:	20 e0       	ldi	r18, 0x00	; 0
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	ae 17       	cp	r26, r30
    1238:	bf 07       	cpc	r27, r31
    123a:	50 f4       	brcc	.+20     	; 0x1250 <free+0x5e>
    123c:	12 96       	adiw	r26, 0x02	; 2
    123e:	4d 91       	ld	r20, X+
    1240:	5c 91       	ld	r21, X
    1242:	13 97       	sbiw	r26, 0x03	; 3
    1244:	9d 01       	movw	r18, r26
    1246:	41 15       	cp	r20, r1
    1248:	51 05       	cpc	r21, r1
    124a:	09 f1       	breq	.+66     	; 0x128e <free+0x9c>
    124c:	da 01       	movw	r26, r20
    124e:	f3 cf       	rjmp	.-26     	; 0x1236 <free+0x44>
    1250:	b3 83       	std	Z+3, r27	; 0x03
    1252:	a2 83       	std	Z+2, r26	; 0x02
    1254:	40 81       	ld	r20, Z
    1256:	51 81       	ldd	r21, Z+1	; 0x01
    1258:	84 0f       	add	r24, r20
    125a:	95 1f       	adc	r25, r21
    125c:	8a 17       	cp	r24, r26
    125e:	9b 07       	cpc	r25, r27
    1260:	71 f4       	brne	.+28     	; 0x127e <free+0x8c>
    1262:	8d 91       	ld	r24, X+
    1264:	9c 91       	ld	r25, X
    1266:	11 97       	sbiw	r26, 0x01	; 1
    1268:	84 0f       	add	r24, r20
    126a:	95 1f       	adc	r25, r21
    126c:	02 96       	adiw	r24, 0x02	; 2
    126e:	91 83       	std	Z+1, r25	; 0x01
    1270:	80 83       	st	Z, r24
    1272:	12 96       	adiw	r26, 0x02	; 2
    1274:	8d 91       	ld	r24, X+
    1276:	9c 91       	ld	r25, X
    1278:	13 97       	sbiw	r26, 0x03	; 3
    127a:	93 83       	std	Z+3, r25	; 0x03
    127c:	82 83       	std	Z+2, r24	; 0x02
    127e:	21 15       	cp	r18, r1
    1280:	31 05       	cpc	r19, r1
    1282:	29 f4       	brne	.+10     	; 0x128e <free+0x9c>
    1284:	f0 93 97 04 	sts	0x0497, r31
    1288:	e0 93 96 04 	sts	0x0496, r30
    128c:	3e c0       	rjmp	.+124    	; 0x130a <free+0x118>
    128e:	d9 01       	movw	r26, r18
    1290:	13 96       	adiw	r26, 0x03	; 3
    1292:	fc 93       	st	X, r31
    1294:	ee 93       	st	-X, r30
    1296:	12 97       	sbiw	r26, 0x02	; 2
    1298:	4d 91       	ld	r20, X+
    129a:	5d 91       	ld	r21, X+
    129c:	a4 0f       	add	r26, r20
    129e:	b5 1f       	adc	r27, r21
    12a0:	ea 17       	cp	r30, r26
    12a2:	fb 07       	cpc	r31, r27
    12a4:	79 f4       	brne	.+30     	; 0x12c4 <free+0xd2>
    12a6:	80 81       	ld	r24, Z
    12a8:	91 81       	ldd	r25, Z+1	; 0x01
    12aa:	84 0f       	add	r24, r20
    12ac:	95 1f       	adc	r25, r21
    12ae:	02 96       	adiw	r24, 0x02	; 2
    12b0:	d9 01       	movw	r26, r18
    12b2:	11 96       	adiw	r26, 0x01	; 1
    12b4:	9c 93       	st	X, r25
    12b6:	8e 93       	st	-X, r24
    12b8:	82 81       	ldd	r24, Z+2	; 0x02
    12ba:	93 81       	ldd	r25, Z+3	; 0x03
    12bc:	13 96       	adiw	r26, 0x03	; 3
    12be:	9c 93       	st	X, r25
    12c0:	8e 93       	st	-X, r24
    12c2:	12 97       	sbiw	r26, 0x02	; 2
    12c4:	e0 e0       	ldi	r30, 0x00	; 0
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ca:	9b 81       	ldd	r25, Y+3	; 0x03
    12cc:	00 97       	sbiw	r24, 0x00	; 0
    12ce:	19 f0       	breq	.+6      	; 0x12d6 <free+0xe4>
    12d0:	fe 01       	movw	r30, r28
    12d2:	ec 01       	movw	r28, r24
    12d4:	f9 cf       	rjmp	.-14     	; 0x12c8 <free+0xd6>
    12d6:	ce 01       	movw	r24, r28
    12d8:	02 96       	adiw	r24, 0x02	; 2
    12da:	28 81       	ld	r18, Y
    12dc:	39 81       	ldd	r19, Y+1	; 0x01
    12de:	82 0f       	add	r24, r18
    12e0:	93 1f       	adc	r25, r19
    12e2:	20 91 94 04 	lds	r18, 0x0494
    12e6:	30 91 95 04 	lds	r19, 0x0495
    12ea:	28 17       	cp	r18, r24
    12ec:	39 07       	cpc	r19, r25
    12ee:	69 f4       	brne	.+26     	; 0x130a <free+0x118>
    12f0:	30 97       	sbiw	r30, 0x00	; 0
    12f2:	29 f4       	brne	.+10     	; 0x12fe <free+0x10c>
    12f4:	10 92 97 04 	sts	0x0497, r1
    12f8:	10 92 96 04 	sts	0x0496, r1
    12fc:	02 c0       	rjmp	.+4      	; 0x1302 <free+0x110>
    12fe:	13 82       	std	Z+3, r1	; 0x03
    1300:	12 82       	std	Z+2, r1	; 0x02
    1302:	d0 93 95 04 	sts	0x0495, r29
    1306:	c0 93 94 04 	sts	0x0494, r28
    130a:	df 91       	pop	r29
    130c:	cf 91       	pop	r28
    130e:	08 95       	ret

00001310 <strnlen_P>:
    1310:	fc 01       	movw	r30, r24
    1312:	05 90       	lpm	r0, Z+
    1314:	61 50       	subi	r22, 0x01	; 1
    1316:	70 40       	sbci	r23, 0x00	; 0
    1318:	01 10       	cpse	r0, r1
    131a:	d8 f7       	brcc	.-10     	; 0x1312 <strnlen_P+0x2>
    131c:	80 95       	com	r24
    131e:	90 95       	com	r25
    1320:	8e 0f       	add	r24, r30
    1322:	9f 1f       	adc	r25, r31
    1324:	08 95       	ret

00001326 <memset>:
    1326:	dc 01       	movw	r26, r24
    1328:	01 c0       	rjmp	.+2      	; 0x132c <memset+0x6>
    132a:	6d 93       	st	X+, r22
    132c:	41 50       	subi	r20, 0x01	; 1
    132e:	50 40       	sbci	r21, 0x00	; 0
    1330:	e0 f7       	brcc	.-8      	; 0x132a <memset+0x4>
    1332:	08 95       	ret

00001334 <strnlen>:
    1334:	fc 01       	movw	r30, r24
    1336:	61 50       	subi	r22, 0x01	; 1
    1338:	70 40       	sbci	r23, 0x00	; 0
    133a:	01 90       	ld	r0, Z+
    133c:	01 10       	cpse	r0, r1
    133e:	d8 f7       	brcc	.-10     	; 0x1336 <strnlen+0x2>
    1340:	80 95       	com	r24
    1342:	90 95       	com	r25
    1344:	8e 0f       	add	r24, r30
    1346:	9f 1f       	adc	r25, r31
    1348:	08 95       	ret

0000134a <fputc>:
    134a:	0f 93       	push	r16
    134c:	1f 93       	push	r17
    134e:	cf 93       	push	r28
    1350:	df 93       	push	r29
    1352:	18 2f       	mov	r17, r24
    1354:	09 2f       	mov	r16, r25
    1356:	eb 01       	movw	r28, r22
    1358:	8b 81       	ldd	r24, Y+3	; 0x03
    135a:	81 fd       	sbrc	r24, 1
    135c:	03 c0       	rjmp	.+6      	; 0x1364 <fputc+0x1a>
    135e:	8f ef       	ldi	r24, 0xFF	; 255
    1360:	9f ef       	ldi	r25, 0xFF	; 255
    1362:	20 c0       	rjmp	.+64     	; 0x13a4 <fputc+0x5a>
    1364:	82 ff       	sbrs	r24, 2
    1366:	10 c0       	rjmp	.+32     	; 0x1388 <fputc+0x3e>
    1368:	4e 81       	ldd	r20, Y+6	; 0x06
    136a:	5f 81       	ldd	r21, Y+7	; 0x07
    136c:	2c 81       	ldd	r18, Y+4	; 0x04
    136e:	3d 81       	ldd	r19, Y+5	; 0x05
    1370:	42 17       	cp	r20, r18
    1372:	53 07       	cpc	r21, r19
    1374:	7c f4       	brge	.+30     	; 0x1394 <fputc+0x4a>
    1376:	e8 81       	ld	r30, Y
    1378:	f9 81       	ldd	r31, Y+1	; 0x01
    137a:	9f 01       	movw	r18, r30
    137c:	2f 5f       	subi	r18, 0xFF	; 255
    137e:	3f 4f       	sbci	r19, 0xFF	; 255
    1380:	39 83       	std	Y+1, r19	; 0x01
    1382:	28 83       	st	Y, r18
    1384:	10 83       	st	Z, r17
    1386:	06 c0       	rjmp	.+12     	; 0x1394 <fputc+0x4a>
    1388:	e8 85       	ldd	r30, Y+8	; 0x08
    138a:	f9 85       	ldd	r31, Y+9	; 0x09
    138c:	81 2f       	mov	r24, r17
    138e:	09 95       	icall
    1390:	89 2b       	or	r24, r25
    1392:	29 f7       	brne	.-54     	; 0x135e <fputc+0x14>
    1394:	2e 81       	ldd	r18, Y+6	; 0x06
    1396:	3f 81       	ldd	r19, Y+7	; 0x07
    1398:	2f 5f       	subi	r18, 0xFF	; 255
    139a:	3f 4f       	sbci	r19, 0xFF	; 255
    139c:	3f 83       	std	Y+7, r19	; 0x07
    139e:	2e 83       	std	Y+6, r18	; 0x06
    13a0:	81 2f       	mov	r24, r17
    13a2:	90 2f       	mov	r25, r16
    13a4:	df 91       	pop	r29
    13a6:	cf 91       	pop	r28
    13a8:	1f 91       	pop	r17
    13aa:	0f 91       	pop	r16
    13ac:	08 95       	ret

000013ae <__ultoa_invert>:
    13ae:	fa 01       	movw	r30, r20
    13b0:	aa 27       	eor	r26, r26
    13b2:	28 30       	cpi	r18, 0x08	; 8
    13b4:	51 f1       	breq	.+84     	; 0x140a <__ultoa_invert+0x5c>
    13b6:	20 31       	cpi	r18, 0x10	; 16
    13b8:	81 f1       	breq	.+96     	; 0x141a <__ultoa_invert+0x6c>
    13ba:	e8 94       	clt
    13bc:	6f 93       	push	r22
    13be:	6e 7f       	andi	r22, 0xFE	; 254
    13c0:	6e 5f       	subi	r22, 0xFE	; 254
    13c2:	7f 4f       	sbci	r23, 0xFF	; 255
    13c4:	8f 4f       	sbci	r24, 0xFF	; 255
    13c6:	9f 4f       	sbci	r25, 0xFF	; 255
    13c8:	af 4f       	sbci	r26, 0xFF	; 255
    13ca:	b1 e0       	ldi	r27, 0x01	; 1
    13cc:	3e d0       	rcall	.+124    	; 0x144a <__ultoa_invert+0x9c>
    13ce:	b4 e0       	ldi	r27, 0x04	; 4
    13d0:	3c d0       	rcall	.+120    	; 0x144a <__ultoa_invert+0x9c>
    13d2:	67 0f       	add	r22, r23
    13d4:	78 1f       	adc	r23, r24
    13d6:	89 1f       	adc	r24, r25
    13d8:	9a 1f       	adc	r25, r26
    13da:	a1 1d       	adc	r26, r1
    13dc:	68 0f       	add	r22, r24
    13de:	79 1f       	adc	r23, r25
    13e0:	8a 1f       	adc	r24, r26
    13e2:	91 1d       	adc	r25, r1
    13e4:	a1 1d       	adc	r26, r1
    13e6:	6a 0f       	add	r22, r26
    13e8:	71 1d       	adc	r23, r1
    13ea:	81 1d       	adc	r24, r1
    13ec:	91 1d       	adc	r25, r1
    13ee:	a1 1d       	adc	r26, r1
    13f0:	20 d0       	rcall	.+64     	; 0x1432 <__ultoa_invert+0x84>
    13f2:	09 f4       	brne	.+2      	; 0x13f6 <__ultoa_invert+0x48>
    13f4:	68 94       	set
    13f6:	3f 91       	pop	r19
    13f8:	2a e0       	ldi	r18, 0x0A	; 10
    13fa:	26 9f       	mul	r18, r22
    13fc:	11 24       	eor	r1, r1
    13fe:	30 19       	sub	r19, r0
    1400:	30 5d       	subi	r19, 0xD0	; 208
    1402:	31 93       	st	Z+, r19
    1404:	de f6       	brtc	.-74     	; 0x13bc <__ultoa_invert+0xe>
    1406:	cf 01       	movw	r24, r30
    1408:	08 95       	ret
    140a:	46 2f       	mov	r20, r22
    140c:	47 70       	andi	r20, 0x07	; 7
    140e:	40 5d       	subi	r20, 0xD0	; 208
    1410:	41 93       	st	Z+, r20
    1412:	b3 e0       	ldi	r27, 0x03	; 3
    1414:	0f d0       	rcall	.+30     	; 0x1434 <__ultoa_invert+0x86>
    1416:	c9 f7       	brne	.-14     	; 0x140a <__ultoa_invert+0x5c>
    1418:	f6 cf       	rjmp	.-20     	; 0x1406 <__ultoa_invert+0x58>
    141a:	46 2f       	mov	r20, r22
    141c:	4f 70       	andi	r20, 0x0F	; 15
    141e:	40 5d       	subi	r20, 0xD0	; 208
    1420:	4a 33       	cpi	r20, 0x3A	; 58
    1422:	18 f0       	brcs	.+6      	; 0x142a <__ultoa_invert+0x7c>
    1424:	49 5d       	subi	r20, 0xD9	; 217
    1426:	31 fd       	sbrc	r19, 1
    1428:	40 52       	subi	r20, 0x20	; 32
    142a:	41 93       	st	Z+, r20
    142c:	02 d0       	rcall	.+4      	; 0x1432 <__ultoa_invert+0x84>
    142e:	a9 f7       	brne	.-22     	; 0x141a <__ultoa_invert+0x6c>
    1430:	ea cf       	rjmp	.-44     	; 0x1406 <__ultoa_invert+0x58>
    1432:	b4 e0       	ldi	r27, 0x04	; 4
    1434:	a6 95       	lsr	r26
    1436:	97 95       	ror	r25
    1438:	87 95       	ror	r24
    143a:	77 95       	ror	r23
    143c:	67 95       	ror	r22
    143e:	ba 95       	dec	r27
    1440:	c9 f7       	brne	.-14     	; 0x1434 <__ultoa_invert+0x86>
    1442:	00 97       	sbiw	r24, 0x00	; 0
    1444:	61 05       	cpc	r22, r1
    1446:	71 05       	cpc	r23, r1
    1448:	08 95       	ret
    144a:	9b 01       	movw	r18, r22
    144c:	ac 01       	movw	r20, r24
    144e:	0a 2e       	mov	r0, r26
    1450:	06 94       	lsr	r0
    1452:	57 95       	ror	r21
    1454:	47 95       	ror	r20
    1456:	37 95       	ror	r19
    1458:	27 95       	ror	r18
    145a:	ba 95       	dec	r27
    145c:	c9 f7       	brne	.-14     	; 0x1450 <__ultoa_invert+0xa2>
    145e:	62 0f       	add	r22, r18
    1460:	73 1f       	adc	r23, r19
    1462:	84 1f       	adc	r24, r20
    1464:	95 1f       	adc	r25, r21
    1466:	a0 1d       	adc	r26, r0
    1468:	08 95       	ret

0000146a <__divmodsi4>:
    146a:	05 2e       	mov	r0, r21
    146c:	97 fb       	bst	r25, 7
    146e:	1e f4       	brtc	.+6      	; 0x1476 <__divmodsi4+0xc>
    1470:	00 94       	com	r0
    1472:	0e 94 4c 0a 	call	0x1498	; 0x1498 <__negsi2>
    1476:	57 fd       	sbrc	r21, 7
    1478:	07 d0       	rcall	.+14     	; 0x1488 <__divmodsi4_neg2>
    147a:	0e 94 3d 05 	call	0xa7a	; 0xa7a <__udivmodsi4>
    147e:	07 fc       	sbrc	r0, 7
    1480:	03 d0       	rcall	.+6      	; 0x1488 <__divmodsi4_neg2>
    1482:	4e f4       	brtc	.+18     	; 0x1496 <__divmodsi4_exit>
    1484:	0c 94 4c 0a 	jmp	0x1498	; 0x1498 <__negsi2>

00001488 <__divmodsi4_neg2>:
    1488:	50 95       	com	r21
    148a:	40 95       	com	r20
    148c:	30 95       	com	r19
    148e:	21 95       	neg	r18
    1490:	3f 4f       	sbci	r19, 0xFF	; 255
    1492:	4f 4f       	sbci	r20, 0xFF	; 255
    1494:	5f 4f       	sbci	r21, 0xFF	; 255

00001496 <__divmodsi4_exit>:
    1496:	08 95       	ret

00001498 <__negsi2>:
    1498:	90 95       	com	r25
    149a:	80 95       	com	r24
    149c:	70 95       	com	r23
    149e:	61 95       	neg	r22
    14a0:	7f 4f       	sbci	r23, 0xFF	; 255
    14a2:	8f 4f       	sbci	r24, 0xFF	; 255
    14a4:	9f 4f       	sbci	r25, 0xFF	; 255
    14a6:	08 95       	ret

000014a8 <__muluhisi3>:
    14a8:	0e 94 5f 05 	call	0xabe	; 0xabe <__umulhisi3>
    14ac:	a5 9f       	mul	r26, r21
    14ae:	90 0d       	add	r25, r0
    14b0:	b4 9f       	mul	r27, r20
    14b2:	90 0d       	add	r25, r0
    14b4:	a4 9f       	mul	r26, r20
    14b6:	80 0d       	add	r24, r0
    14b8:	91 1d       	adc	r25, r1
    14ba:	11 24       	eor	r1, r1
    14bc:	08 95       	ret

000014be <__mulshisi3>:
    14be:	b7 ff       	sbrs	r27, 7
    14c0:	0c 94 54 0a 	jmp	0x14a8	; 0x14a8 <__muluhisi3>

000014c4 <__mulohisi3>:
    14c4:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <__muluhisi3>
    14c8:	82 1b       	sub	r24, r18
    14ca:	93 0b       	sbc	r25, r19
    14cc:	08 95       	ret

000014ce <__prologue_saves__>:
    14ce:	2f 92       	push	r2
    14d0:	3f 92       	push	r3
    14d2:	4f 92       	push	r4
    14d4:	5f 92       	push	r5
    14d6:	6f 92       	push	r6
    14d8:	7f 92       	push	r7
    14da:	8f 92       	push	r8
    14dc:	9f 92       	push	r9
    14de:	af 92       	push	r10
    14e0:	bf 92       	push	r11
    14e2:	cf 92       	push	r12
    14e4:	df 92       	push	r13
    14e6:	ef 92       	push	r14
    14e8:	ff 92       	push	r15
    14ea:	0f 93       	push	r16
    14ec:	1f 93       	push	r17
    14ee:	cf 93       	push	r28
    14f0:	df 93       	push	r29
    14f2:	cd b7       	in	r28, 0x3d	; 61
    14f4:	de b7       	in	r29, 0x3e	; 62
    14f6:	ca 1b       	sub	r28, r26
    14f8:	db 0b       	sbc	r29, r27
    14fa:	0f b6       	in	r0, 0x3f	; 63
    14fc:	f8 94       	cli
    14fe:	de bf       	out	0x3e, r29	; 62
    1500:	0f be       	out	0x3f, r0	; 63
    1502:	cd bf       	out	0x3d, r28	; 61
    1504:	09 94       	ijmp

00001506 <__epilogue_restores__>:
    1506:	2a 88       	ldd	r2, Y+18	; 0x12
    1508:	39 88       	ldd	r3, Y+17	; 0x11
    150a:	48 88       	ldd	r4, Y+16	; 0x10
    150c:	5f 84       	ldd	r5, Y+15	; 0x0f
    150e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1510:	7d 84       	ldd	r7, Y+13	; 0x0d
    1512:	8c 84       	ldd	r8, Y+12	; 0x0c
    1514:	9b 84       	ldd	r9, Y+11	; 0x0b
    1516:	aa 84       	ldd	r10, Y+10	; 0x0a
    1518:	b9 84       	ldd	r11, Y+9	; 0x09
    151a:	c8 84       	ldd	r12, Y+8	; 0x08
    151c:	df 80       	ldd	r13, Y+7	; 0x07
    151e:	ee 80       	ldd	r14, Y+6	; 0x06
    1520:	fd 80       	ldd	r15, Y+5	; 0x05
    1522:	0c 81       	ldd	r16, Y+4	; 0x04
    1524:	1b 81       	ldd	r17, Y+3	; 0x03
    1526:	aa 81       	ldd	r26, Y+2	; 0x02
    1528:	b9 81       	ldd	r27, Y+1	; 0x01
    152a:	ce 0f       	add	r28, r30
    152c:	d1 1d       	adc	r29, r1
    152e:	0f b6       	in	r0, 0x3f	; 63
    1530:	f8 94       	cli
    1532:	de bf       	out	0x3e, r29	; 62
    1534:	0f be       	out	0x3f, r0	; 63
    1536:	cd bf       	out	0x3d, r28	; 61
    1538:	ed 01       	movw	r28, r26
    153a:	08 95       	ret

0000153c <_exit>:
    153c:	f8 94       	cli

0000153e <__stop_program>:
    153e:	ff cf       	rjmp	.-2      	; 0x153e <__stop_program>
